
PDU_17D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc4  08003cc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc4  08003cc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc4  08003cc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003cd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003cd8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e434  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdf  00000000  00000000  0002e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00030ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d33d  00000000  00000000  00031dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e345  00000000  00000000  0004f105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1174  00000000  00000000  0005d44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e5be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  0011e610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c8c 	.word	0x08003c8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003c8c 	.word	0x08003c8c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb9c 	bl	800095a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f889 	bl	8000338 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f993 	bl	8000550 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f8d1 	bl	80003d0 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 800022e:	f000 f915 	bl	800045c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 8000232:	f000 f9e3 	bl	80005fc <FDCAN_Config>

  //Starting timers
  HAL_TIM_Base_Start_IT(&htim3);
 8000236:	483d      	ldr	r0, [pc, #244]	; (800032c <main+0x114>)
 8000238:	f002 fc58 	bl	8002aec <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 800023c:	2104      	movs	r1, #4
 800023e:	483b      	ldr	r0, [pc, #236]	; (800032c <main+0x114>)
 8000240:	f002 fd20 	bl	8002c84 <HAL_TIM_PWM_Start>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <main+0x36>
    {
      /* PWM Generation Error */
      Error_Handler();
 800024a:	f000 fa35 	bl	80006b8 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000254:	4836      	ldr	r0, [pc, #216]	; (8000330 <main+0x118>)
 8000256:	f001 fc49 	bl	8001aec <HAL_GPIO_WritePin>

	if(RxData[0] == 1)
 800025a:	4b36      	ldr	r3, [pc, #216]	; (8000334 <main+0x11c>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d106      	bne.n	8000270 <main+0x58>
	{
		HAL_GPIO_WritePin(GPIOA, PUMP_CTRL_Pin, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2101      	movs	r1, #1
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f001 fc3f 	bl	8001aec <HAL_GPIO_WritePin>
 800026e:	e005      	b.n	800027c <main+0x64>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, PUMP_CTRL_Pin, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2101      	movs	r1, #1
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000278:	f001 fc38 	bl	8001aec <HAL_GPIO_WritePin>
	}

	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11); //LED //Actual Pin Label: LED_Pin

	if (RxData[1] & 0x01)
 800027c:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <main+0x11c>)
 800027e:	785b      	ldrb	r3, [r3, #1]
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d006      	beq.n	8000296 <main+0x7e>
	{
		HAL_GPIO_WritePin(GPIOA, BRKLIGHT_CTRL_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f001 fc2c 	bl	8001aec <HAL_GPIO_WritePin>
 8000294:	e005      	b.n	80002a2 <main+0x8a>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, BRKLIGHT_CTRL_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2102      	movs	r1, #2
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f001 fc25 	bl	8001aec <HAL_GPIO_WritePin>
	}

	if (RxData[1] & 0x02)
 80002a2:	4b24      	ldr	r3, [pc, #144]	; (8000334 <main+0x11c>)
 80002a4:	785b      	ldrb	r3, [r3, #1]
 80002a6:	f003 0302 	and.w	r3, r3, #2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d011      	beq.n	80002d2 <main+0xba>
		{
		if (RxData[2] > 0x00)
 80002ae:	4b21      	ldr	r3, [pc, #132]	; (8000334 <main+0x11c>)
 80002b0:	789b      	ldrb	r3, [r3, #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d006      	beq.n	80002c4 <main+0xac>
			{
				int duty_cycle_const = RxData[2];
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0x11c>)
 80002b8:	789b      	ldrb	r3, [r3, #2]
 80002ba:	607b      	str	r3, [r7, #4]
				int duty_cycle = (duty_cycle_const*256)-1;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	3b01      	subs	r3, #1
 80002c2:	603b      	str	r3, [r7, #0]
			}
		HAL_GPIO_WritePin(GPIOA,RAD_FAN_CTRL_Pin, GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2180      	movs	r1, #128	; 0x80
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f001 fc0e 	bl	8001aec <HAL_GPIO_WritePin>
 80002d0:	e005      	b.n	80002de <main+0xc6>
		//uint8_t duty_cycle_rad_fan = RxData[1];
		}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RAD_FAN_CTRL_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f001 fc07 	bl	8001aec <HAL_GPIO_WritePin>
	}
	if (RxData[1] & 0x04)
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <main+0x11c>)
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d006      	beq.n	80002f8 <main+0xe0>
	{
		HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_L_CTRL_Pin, GPIO_PIN_SET); //FAN BATTBOX LEFT
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f0:	480f      	ldr	r0, [pc, #60]	; (8000330 <main+0x118>)
 80002f2:	f001 fbfb 	bl	8001aec <HAL_GPIO_WritePin>
 80002f6:	e005      	b.n	8000304 <main+0xec>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_L_CTRL_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <main+0x118>)
 8000300:	f001 fbf4 	bl	8001aec <HAL_GPIO_WritePin>
	}

	if (RxData[1] & 0x08)
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x11c>)
 8000306:	785b      	ldrb	r3, [r3, #1]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	2b00      	cmp	r3, #0
 800030e:	d006      	beq.n	800031e <main+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_R_CTRL_Pin, GPIO_PIN_SET); //FAN BATTBOX RIGHT
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000316:	4806      	ldr	r0, [pc, #24]	; (8000330 <main+0x118>)
 8000318:	f001 fbe8 	bl	8001aec <HAL_GPIO_WritePin>
 800031c:	e797      	b.n	800024e <main+0x36>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_R_CTRL_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000324:	4802      	ldr	r0, [pc, #8]	; (8000330 <main+0x118>)
 8000326:	f001 fbe1 	bl	8001aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800032a:	e790      	b.n	800024e <main+0x36>
 800032c:	2000008c 	.word	0x2000008c
 8000330:	48000400 	.word	0x48000400
 8000334:	20000100 	.word	0x20000100

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b094      	sub	sp, #80	; 0x50
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2238      	movs	r2, #56	; 0x38
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fc98 	bl	8003c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800035a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800035e:	f001 fbdd 	bl	8001b1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000362:	2302      	movs	r3, #2
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036c:	2340      	movs	r3, #64	; 0x40
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000370:	2302      	movs	r3, #2
 8000372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000374:	2302      	movs	r3, #2
 8000376:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000378:	2301      	movs	r3, #1
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800037c:	230a      	movs	r3, #10
 800037e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000380:	2302      	movs	r3, #2
 8000382:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000384:	2308      	movs	r3, #8
 8000386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000388:	2302      	movs	r3, #2
 800038a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fc67 	bl	8001c64 <HAL_RCC_OscConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800039c:	f000 f98c 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a0:	230f      	movs	r3, #15
 80003a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a4:	2301      	movs	r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 ff6b 	bl	8002294 <HAL_RCC_ClockConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003c4:	f000 f978 	bl	80006b8 <Error_Handler>
  }
}
 80003c8:	bf00      	nop
 80003ca:	3750      	adds	r7, #80	; 0x50
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	//https://community.st.com/s/question/0D53W00000YwmXTSAZ/fdcan-callback-function-is-not-called
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003d6:	4a20      	ldr	r2, [pc, #128]	; (8000458 <MX_FDCAN1_Init+0x88>)
 80003d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000400:	2201      	movs	r2, #1
 8000402:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000406:	2203      	movs	r2, #3
 8000408:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800040c:	2210      	movs	r2, #16
 800040e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000412:	2203      	movs	r2, #3
 8000414:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000418:	2201      	movs	r2, #1
 800041a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800041e:	2203      	movs	r2, #3
 8000420:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000424:	2210      	movs	r2, #16
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800042a:	2203      	movs	r2, #3
 800042c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000430:	2201      	movs	r2, #1
 8000432:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000436:	2200      	movs	r2, #0
 8000438:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800043c:	2200      	movs	r2, #0
 800043e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000442:	f000 fc0b 	bl	8000c5c <HAL_FDCAN_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800044c:	f000 f934 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000028 	.word	0x20000028
 8000458:	40006400 	.word	0x40006400

0800045c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08e      	sub	sp, #56	; 0x38
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800047c:	463b      	mov	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800048e:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <MX_TIM3_Init+0xe8>)
 8000490:	4a2d      	ldr	r2, [pc, #180]	; (8000548 <MX_TIM3_Init+0xec>)
 8000492:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000494:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <MX_TIM3_Init+0xe8>)
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MX_TIM3_Init+0xe8>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004a0:	4b28      	ldr	r3, [pc, #160]	; (8000544 <MX_TIM3_Init+0xe8>)
 80004a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a8:	4b26      	ldr	r3, [pc, #152]	; (8000544 <MX_TIM3_Init+0xe8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <MX_TIM3_Init+0xe8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004b4:	4823      	ldr	r0, [pc, #140]	; (8000544 <MX_TIM3_Init+0xe8>)
 80004b6:	f002 fac1 	bl	8002a3c <HAL_TIM_Base_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004c0:	f000 f8fa 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ce:	4619      	mov	r1, r3
 80004d0:	481c      	ldr	r0, [pc, #112]	; (8000544 <MX_TIM3_Init+0xe8>)
 80004d2:	f002 fdeb 	bl	80030ac <HAL_TIM_ConfigClockSource>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80004dc:	f000 f8ec 	bl	80006b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004e0:	4818      	ldr	r0, [pc, #96]	; (8000544 <MX_TIM3_Init+0xe8>)
 80004e2:	f002 fb6d 	bl	8002bc0 <HAL_TIM_PWM_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80004ec:	f000 f8e4 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004f8:	f107 031c 	add.w	r3, r7, #28
 80004fc:	4619      	mov	r1, r3
 80004fe:	4811      	ldr	r0, [pc, #68]	; (8000544 <MX_TIM3_Init+0xe8>)
 8000500:	f003 fb16 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800050a:	f000 f8d5 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050e:	2360      	movs	r3, #96	; 0x60
 8000510:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = duty_cycle;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_TIM3_Init+0xf0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	2204      	movs	r2, #4
 8000524:	4619      	mov	r1, r3
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <MX_TIM3_Init+0xe8>)
 8000528:	f002 fcac 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000532:	f000 f8c1 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <MX_TIM3_Init+0xe8>)
 8000538:	f000 f96a 	bl	8000810 <HAL_TIM_MspPostInit>

}
 800053c:	bf00      	nop
 800053e:	3738      	adds	r7, #56	; 0x38
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	2000008c 	.word	0x2000008c
 8000548:	40000400 	.word	0x40000400
 800054c:	20000108 	.word	0x20000108

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_GPIO_Init+0xa4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <MX_GPIO_Init+0xa4>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <MX_GPIO_Init+0xa4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_GPIO_Init+0xa4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_GPIO_Init+0xa4>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_GPIO_Init+0xa4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PUMP_CTRL_Pin|BRKLIGHT_CTRL_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2103      	movs	r1, #3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f001 faa5 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|FAN_BATTBOX_L_CTRL_Pin|FAN_BATTBOX_R_CTRL_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <MX_GPIO_Init+0xa8>)
 80005aa:	f001 fa9f 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PUMP_CTRL_Pin BRKLIGHT_CTRL_Pin */
  GPIO_InitStruct.Pin = PUMP_CTRL_Pin|BRKLIGHT_CTRL_Pin;
 80005ae:	2303      	movs	r3, #3
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f001 f90e 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin FAN_BATTBOX_L_CTRL_Pin FAN_BATTBOX_R_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_Pin|FAN_BATTBOX_L_CTRL_Pin|FAN_BATTBOX_R_CTRL_Pin;
 80005cc:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80005d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_GPIO_Init+0xa8>)
 80005e6:	f001 f8ff 	bl	80017e8 <HAL_GPIO_Init>

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000400 	.word	0x48000400

080005fc <FDCAN_Config>:
  * @brief  Configures the FDCAN.
  * @param  None
  * @retval None
  */
static void FDCAN_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800060a:	2302      	movs	r3, #2
 800060c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x666; //filter: 0b10000000000 standard 11-bit ID
 8000612:	f240 6366 	movw	r3, #1638	; 0x666
 8000616:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF; //0x7FF; //Filter Mask: 0b11111111111 to check all 11 bits of incoming message against filter
 8000618:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800061c:	617b      	str	r3, [r7, #20]
  //Check this out: https://schulz-m.github.io/2017/03/23/stm32-can-id-filter/
  //Also: https://community.st.com/s/question/0D53W00000YwmXTSAZ/fdcan-callback-function-is-not-called
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4815      	ldr	r0, [pc, #84]	; (8000678 <FDCAN_Config+0x7c>)
 8000624:	f000 fc74 	bl	8000f10 <HAL_FDCAN_ConfigFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <FDCAN_Config+0x36>
  {
    Error_Handler();
 800062e:	f000 f843 	bl	80006b8 <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000632:	2300      	movs	r3, #0
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	2202      	movs	r2, #2
 800063a:	2102      	movs	r1, #2
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <FDCAN_Config+0x7c>)
 800063e:	f000 fcc1 	bl	8000fc4 <HAL_FDCAN_ConfigGlobalFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <FDCAN_Config+0x50>
  {
    Error_Handler();
 8000648:	f000 f836 	bl	80006b8 <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <FDCAN_Config+0x7c>)
 800064e:	f000 fcea 	bl	8001026 <HAL_FDCAN_Start>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <FDCAN_Config+0x60>
  {
    Error_Handler();
 8000658:	f000 f82e 	bl	80006b8 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <FDCAN_Config+0x7c>)
 8000662:	f000 fde3 	bl	800122c <HAL_FDCAN_ActivateNotification>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <FDCAN_Config+0x74>
  {
    Error_Handler();
 800066c:	f000 f824 	bl	80006b8 <Error_Handler>
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  TxHeader.MessageMarker = 0;
  */
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000028 	.word	0x20000028

0800067c <HAL_FDCAN_RxFifo0Callback>:
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
//Do we need this at all for this board? I guess we could use this for immediately activating relays & such
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
 //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00a      	beq.n	80006a6 <HAL_FDCAN_RxFifo0Callback+0x2a>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 fcee 	bl	8001078 <HAL_FDCAN_GetRxMessage>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    Error_Handler();
 80006a2:	f000 f809 	bl	80006b8 <Error_Handler>
      LED_Display(RxData[0]);
      ubKeyNumber = RxData[0];
    }
    */
  }
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000100 	.word	0x20000100
 80006b4:	200000d8 	.word	0x200000d8

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6613      	str	r3, [r2, #96]	; 0x60
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x44>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6593      	str	r3, [r2, #88]	; 0x58
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09a      	sub	sp, #104	; 0x68
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	2244      	movs	r2, #68	; 0x44
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f003 faa5 	bl	8003c7c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <HAL_FDCAN_MspInit+0xbc>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d141      	bne.n	80007c0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4618      	mov	r0, r3
 800074e:	f001 ff85 	bl	800265c <HAL_RCCEx_PeriphCLKConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000758:	f7ff ffae 	bl	80006b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_FDCAN_MspInit+0xc0>)
 800075e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000760:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <HAL_FDCAN_MspInit+0xc0>)
 8000762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000766:	6593      	str	r3, [r2, #88]	; 0x58
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_FDCAN_MspInit+0xc0>)
 800076a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_FDCAN_MspInit+0xc0>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <HAL_FDCAN_MspInit+0xc0>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_FDCAN_MspInit+0xc0>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800078c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800079e:	2309      	movs	r3, #9
 80007a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f001 f81c 	bl	80017e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2015      	movs	r0, #21
 80007b6:	f000 fa1c 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007ba:	2015      	movs	r0, #21
 80007bc:	f000 fa33 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80007c0:	bf00      	nop
 80007c2:	3768      	adds	r7, #104	; 0x68
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40006400 	.word	0x40006400
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_TIM_Base_MspInit+0x3c>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_TIM_Base_MspInit+0x3c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6593      	str	r3, [r2, #88]	; 0x58
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_TIM_Base_MspInit+0x3c>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40000400 	.word	0x40000400
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_TIM_MspPostInit+0x64>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d11c      	bne.n	800086c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_TIM_MspPostInit+0x68>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <HAL_TIM_MspPostInit+0x68>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_TIM_MspPostInit+0x68>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RAD_FAN_CTRL_Pin;
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RAD_FAN_CTRL_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 ffbe 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40000400 	.word	0x40000400
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f89a 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <FDCAN1_IT0_IRQHandler+0x10>)
 80008d6:	f000 fd8f 	bl	80013f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000028 	.word	0x20000028

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490e      	ldr	r1, [pc, #56]	; (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0b      	ldr	r4, [pc, #44]	; (8000954 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000932:	f7ff ffd7 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f003 f97d 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093a:	f7ff fc6d 	bl	8000218 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800094c:	08003ccc 	.word	0x08003ccc
  ldr r2, =_sbss
 8000950:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000954:	20000110 	.word	0x20000110

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>

0800095a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f939 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f80e 	bl	800098c <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097c:	f7ff fea2 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	79fb      	ldrb	r3, [r7, #7]

}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_InitTick+0x68>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d022      	beq.n	80009e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_InitTick+0x6c>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_InitTick+0x68>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80009b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f944 	bl	8000c42 <HAL_SYSTICK_Config>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10f      	bne.n	80009e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d809      	bhi.n	80009da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295
 80009ce:	f000 f910 	bl	8000bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_InitTick+0x70>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e007      	b.n	80009ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e004      	b.n	80009ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e001      	b.n	80009ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x1c>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x20>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x1c>)
 8000a10:	6013      	str	r3, [r2, #0]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	2000010c 	.word	0x2000010c
 8000a20:	20000008 	.word	0x20000008

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000010c 	.word	0x2000010c

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff8e 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff29 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff40 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff33 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa4 	bl	8000b98 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e147      	b.n	8000efe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d106      	bne.n	8000c88 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fd42 	bl	800070c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0210 	bic.w	r2, r2, #16
 8000c96:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c98:	f7ff fec4 	bl	8000a24 <HAL_GetTick>
 8000c9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c9e:	e012      	b.n	8000cc6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ca0:	f7ff fec0 	bl	8000a24 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d90b      	bls.n	8000cc6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f043 0201 	orr.w	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e11b      	b.n	8000efe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d0e5      	beq.n	8000ca0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	699a      	ldr	r2, [r3, #24]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0201 	orr.w	r2, r2, #1
 8000ce2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce4:	f7ff fe9e 	bl	8000a24 <HAL_GetTick>
 8000ce8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000cea:	e012      	b.n	8000d12 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000cec:	f7ff fe9a 	bl	8000a24 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b0a      	cmp	r3, #10
 8000cf8:	d90b      	bls.n	8000d12 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e0f5      	b.n	8000efe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0e5      	beq.n	8000cec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0202 	orr.w	r2, r2, #2
 8000d2e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a74      	ldr	r2, [pc, #464]	; (8000f08 <HAL_FDCAN_Init+0x2ac>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d103      	bne.n	8000d42 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000d3a:	4a74      	ldr	r2, [pc, #464]	; (8000f0c <HAL_FDCAN_Init+0x2b0>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7c1b      	ldrb	r3, [r3, #16]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d108      	bne.n	8000d5c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d58:	619a      	str	r2, [r3, #24]
 8000d5a:	e007      	b.n	8000d6c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	699a      	ldr	r2, [r3, #24]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7c5b      	ldrb	r3, [r3, #17]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d108      	bne.n	8000d86 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	699a      	ldr	r2, [r3, #24]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d82:	619a      	str	r2, [r3, #24]
 8000d84:	e007      	b.n	8000d96 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	699a      	ldr	r2, [r3, #24]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d94:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7c9b      	ldrb	r3, [r3, #18]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dac:	619a      	str	r2, [r3, #24]
 8000dae:	e007      	b.n	8000dc0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dbe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	699a      	ldr	r2, [r3, #24]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000de4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0210 	bic.w	r2, r2, #16
 8000df4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d108      	bne.n	8000e10 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	699a      	ldr	r2, [r3, #24]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f042 0204 	orr.w	r2, r2, #4
 8000e0c:	619a      	str	r2, [r3, #24]
 8000e0e:	e02c      	b.n	8000e6a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d028      	beq.n	8000e6a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d01c      	beq.n	8000e5a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e2e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0210 	orr.w	r2, r2, #16
 8000e3e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d110      	bne.n	8000e6a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0220 	orr.w	r2, r2, #32
 8000e56:	619a      	str	r2, [r3, #24]
 8000e58:	e007      	b.n	8000e6a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 0220 	orr.w	r2, r2, #32
 8000e68:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e7a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e82:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e92:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e94:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e9e:	d115      	bne.n	8000ecc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000eae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ec8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000eca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 fc2a 	bl	800173c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40006400 	.word	0x40006400
 8000f0c:	40006500 	.word	0x40006500

08000f10 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f20:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d002      	beq.n	8000f2e <HAL_FDCAN_ConfigFilter+0x1e>
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d13d      	bne.n	8000faa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d119      	bne.n	8000f6a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f42:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000f4a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e01d      	b.n	8000fa6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	075a      	lsls	r2, r3, #29
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	079a      	lsls	r2, r3, #30
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e006      	b.n	8000fb8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	f043 0202 	orr.w	r2, r3, #2
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
  }
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d116      	bne.n	800100c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	011a      	lsls	r2, r3, #4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e006      	b.n	800101a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001010:	f043 0204 	orr.w	r2, r3, #4
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
  }
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d110      	bne.n	800105c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	699a      	ldr	r2, [r3, #24]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e006      	b.n	800106a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	f043 0204 	orr.w	r2, r3, #4
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
  }
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800108c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800108e:	7efb      	ldrb	r3, [r7, #27]
 8001090:	2b02      	cmp	r3, #2
 8001092:	f040 80bc 	bne.w	800120e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b40      	cmp	r3, #64	; 0x40
 800109a:	d121      	bne.n	80010e0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d107      	bne.n	80010bc <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0af      	b.n	800121c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	440b      	add	r3, r1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
 80010de:	e020      	b.n	8001122 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d107      	bne.n	8001100 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e08d      	b.n	800121c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d107      	bne.n	8001146 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e005      	b.n	8001152 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3304      	adds	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0e1b      	lsrs	r3, r3, #24
 80011a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0fda      	lsrs	r2, r3, #31
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	3304      	adds	r3, #4
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
 80011c4:	e00a      	b.n	80011dc <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	441a      	add	r2, r3
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	440b      	add	r3, r1
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	3301      	adds	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	461a      	mov	r2, r3
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d3eb      	bcc.n	80011c6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b40      	cmp	r3, #64	; 0x40
 80011f2:	d105      	bne.n	8001200 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80011fe:	e004      	b.n	800120a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e006      	b.n	800121c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f043 0208 	orr.w	r2, r3, #8
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	372c      	adds	r7, #44	; 0x2c
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	08003cb4 	.word	0x08003cb4

0800122c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800123e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d003      	beq.n	800124e <HAL_FDCAN_ActivateNotification+0x22>
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b02      	cmp	r3, #2
 800124a:	f040 80c8 	bne.w	80013de <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d03b      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d031      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d027      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d01d      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d013      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00c      	beq.n	80012f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d107      	bne.n	80012f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13b      	bne.n	800137e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d131      	bne.n	800137e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d127      	bne.n	800137e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d11d      	bne.n	800137e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d113      	bne.n	800137e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00c      	beq.n	800138e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0202 	orr.w	r2, r2, #2
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d009      	beq.n	80013ca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e006      	b.n	80013ec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	f043 0202 	orr.w	r2, r3, #2
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001406:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001414:	4013      	ands	r3, r2
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	6a3a      	ldr	r2, [r7, #32]
 800142c:	4013      	ands	r3, r2
 800142e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800143a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	4013      	ands	r3, r2
 8001446:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001452:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001466:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800146a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2240      	movs	r2, #64	; 0x40
 800149a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f92e 	bl	80016fe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01b      	beq.n	80014e8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d014      	beq.n	80014e8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014c6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f8ec 	bl	80016c0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80014f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f8b6 	bl	800166a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a3a      	ldr	r2, [r7, #32]
 800150a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff f8b4 	bl	800067c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f8ab 	bl	8001680 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00e      	beq.n	8001556 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8a0 	bl	8001696 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01a      	beq.n	800159a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	2b00      	cmp	r3, #0
 8001570:	d013      	beq.n	800159a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800157a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001592:	68f9      	ldr	r1, [r7, #12]
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f888 	bl	80016aa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00e      	beq.n	80015c6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f888 	bl	80016d6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00e      	beq.n	80015f2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f87c 	bl	80016ea <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d011      	beq.n	8001624 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00a      	beq.n	8001624 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001616:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001632:	6979      	ldr	r1, [r7, #20]
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f876 	bl	8001726 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f858 	bl	8001712 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001746:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001756:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	041a      	lsls	r2, r3, #16
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800177c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	061a      	lsls	r2, r3, #24
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e005      	b.n	80017ca <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3304      	adds	r3, #4
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3f3      	bcc.n	80017be <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	4000a400 	.word	0x4000a400

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017f6:	e15a      	b.n	8001aae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 814c 	beq.w	8001aa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d017      	beq.n	80018c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80a6 	beq.w	8001aa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_GPIO_Init+0x2e4>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_GPIO_Init+0x2e4>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6613      	str	r3, [r2, #96]	; 0x60
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_GPIO_Init+0x2e4>)
 800196a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001974:	4a56      	ldr	r2, [pc, #344]	; (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199e:	d01f      	beq.n	80019e0 <HAL_GPIO_Init+0x1f8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x2ec>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d019      	beq.n	80019dc <HAL_GPIO_Init+0x1f4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <HAL_GPIO_Init+0x1f0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x2f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00d      	beq.n	80019d4 <HAL_GPIO_Init+0x1ec>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x2f8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d007      	beq.n	80019d0 <HAL_GPIO_Init+0x1e8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2fc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_GPIO_Init+0x1e4>
 80019c8:	2305      	movs	r3, #5
 80019ca:	e00a      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019cc:	2306      	movs	r3, #6
 80019ce:	e008      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e006      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019d8:	2302      	movs	r3, #2
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019e0:	2300      	movs	r3, #0
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f2:	4937      	ldr	r1, [pc, #220]	; (8001ad0 <HAL_GPIO_Init+0x2e8>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a24:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a4e:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f47f ae9d 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	48001400 	.word	0x48001400
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d141      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d131      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b3e:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b50:	4a41      	ldr	r2, [pc, #260]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2232      	movs	r2, #50	; 0x32
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4a3f      	ldr	r2, [pc, #252]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	0c9b      	lsrs	r3, r3, #18
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6e:	e002      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d102      	bne.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f2      	bne.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b96:	d158      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e057      	b.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bac:	e04d      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb4:	d141      	bne.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc2:	d131      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bca:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2232      	movs	r2, #50	; 0x32
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	0c9b      	lsrs	r3, r3, #18
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfa:	e002      	b.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d102      	bne.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f2      	bne.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d112      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e011      	b.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c38:	e007      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e306      	b.n	8002284 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d075      	beq.n	8001d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4b97      	ldr	r3, [pc, #604]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3e>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x44>
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	4b8d      	ldr	r3, [pc, #564]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d05b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x108>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d157      	bne.n	8001d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e2e1      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x74>
 8001cca:	4b85      	ldr	r3, [pc, #532]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a84      	ldr	r2, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x98>
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b7c      	ldr	r3, [pc, #496]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7b      	ldr	r2, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a74      	ldr	r2, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fe82 	bl	8000a24 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7fe fe7e 	bl	8000a24 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e2a6      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	4b6a      	ldr	r3, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xc0>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7fe fe6e 	bl	8000a24 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe fe6a 	bl	8000a24 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e292      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5e:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0xe8>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d075      	beq.n	8001e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7a:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	4b56      	ldr	r3, [pc, #344]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_OscConfig+0x136>
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_OscConfig+0x13c>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d11f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x154>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e265      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	4946      	ldr	r1, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HAL_RCC_OscConfig+0x280>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fddb 	bl	800098c <HAL_InitTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d043      	beq.n	8001e64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e251      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a3c      	ldr	r2, [pc, #240]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe fe16 	bl	8000a24 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7fe fe12 	bl	8000a24 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e23a      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	061b      	lsls	r3, r3, #24
 8001e28:	492d      	ldr	r1, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e01a      	b.n	8001e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fdf2 	bl	8000a24 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7fe fdee 	bl	8000a24 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e216      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1e0>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d041      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7fe fdcb 	bl	8000a24 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7fe fdc7 	bl	8000a24 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1ef      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ef      	beq.n	8001e92 <HAL_RCC_OscConfig+0x22e>
 8001eb2:	e020      	b.n	8001ef6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fdae 	bl	8000a24 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eca:	e00d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7fe fdaa 	bl	8000a24 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d906      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1d2      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ea      	bne.n	8001ecc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80a6 	beq.w	8002050 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f08:	4b84      	ldr	r3, [pc, #528]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2b4>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x2b6>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	4a7e      	ldr	r2, [pc, #504]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2a:	4b7c      	ldr	r3, [pc, #496]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	4b79      	ldr	r3, [pc, #484]	; (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a75      	ldr	r2, [pc, #468]	; (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7fe fd67 	bl	8000a24 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7fe fd63 	bl	8000a24 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e18b      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_RCC_OscConfig+0x32e>
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a65      	ldr	r2, [pc, #404]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f90:	e024      	b.n	8001fdc <HAL_RCC_OscConfig+0x378>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d110      	bne.n	8001fbc <HAL_RCC_OscConfig+0x358>
 8001f9a:	4b60      	ldr	r3, [pc, #384]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	4a5e      	ldr	r2, [pc, #376]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001faa:	4b5c      	ldr	r3, [pc, #368]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	4a5a      	ldr	r2, [pc, #360]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fba:	e00f      	b.n	8001fdc <HAL_RCC_OscConfig+0x378>
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	4a56      	ldr	r2, [pc, #344]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d016      	beq.n	8002012 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7fe fd1e 	bl	8000a24 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7fe fd1a 	bl	8000a24 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e140      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ed      	beq.n	8001fec <HAL_RCC_OscConfig+0x388>
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7fe fd07 	bl	8000a24 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe fd03 	bl	8000a24 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	; 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e129      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002030:	4b3a      	ldr	r3, [pc, #232]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ed      	bne.n	800201a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	4a34      	ldr	r2, [pc, #208]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d03c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01c      	beq.n	800209e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206a:	4a2c      	ldr	r2, [pc, #176]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7fe fcd6 	bl	8000a24 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800207c:	f7fe fcd2 	bl	8000a24 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0fa      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ef      	beq.n	800207c <HAL_RCC_OscConfig+0x418>
 800209c:	e01b      	b.n	80020d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7fe fcb9 	bl	8000a24 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b6:	f7fe fcb5 	bl	8000a24 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0dd      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ef      	bne.n	80020b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80d1 	beq.w	8002282 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	f000 808b 	beq.w	8002204 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d15e      	bne.n	80021b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe fc8f 	bl	8000a24 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002108:	e00c      	b.n	8002124 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fc8b 	bl	8000a24 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d905      	bls.n	8002124 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0b3      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_OscConfig+0x628>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ec      	bne.n	800210a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002130:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x628>)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6a11      	ldr	r1, [r2, #32]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002140:	3a01      	subs	r2, #1
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800214a:	0212      	lsls	r2, r2, #8
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002152:	0852      	lsrs	r2, r2, #1
 8002154:	3a01      	subs	r2, #1
 8002156:	0552      	lsls	r2, r2, #21
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800215e:	0852      	lsrs	r2, r2, #1
 8002160:	3a01      	subs	r2, #1
 8002162:	0652      	lsls	r2, r2, #25
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800216a:	06d2      	lsls	r2, r2, #27
 800216c:	430a      	orrs	r2, r1
 800216e:	4947      	ldr	r1, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x628>)
 8002170:	4313      	orrs	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b45      	ldr	r3, [pc, #276]	; (800228c <HAL_RCC_OscConfig+0x628>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a44      	ldr	r2, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x628>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002180:	4b42      	ldr	r3, [pc, #264]	; (800228c <HAL_RCC_OscConfig+0x628>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a41      	ldr	r2, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x628>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fc4a 	bl	8000a24 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe fc46 	bl	8000a24 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e06e      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x530>
 80021b2:	e066      	b.n	8002282 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b35      	ldr	r3, [pc, #212]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a34      	ldr	r2, [pc, #208]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a2e      	ldr	r2, [pc, #184]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fc22 	bl	8000a24 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fc1e 	bl	8000a24 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e046      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x628>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x580>
 8002202:	e03e      	b.n	8002282 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e039      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCC_OscConfig+0x628>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	429a      	cmp	r2, r3
 8002222:	d12c      	bne.n	800227e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	3b01      	subs	r3, #1
 8002230:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d123      	bne.n	800227e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d11b      	bne.n	800227e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d113      	bne.n	800227e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	3b01      	subs	r3, #1
 8002264:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d109      	bne.n	800227e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	019f800c 	.word	0x019f800c

08002294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e11e      	b.n	80024ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b91      	ldr	r3, [pc, #580]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b8e      	ldr	r3, [pc, #568]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	498c      	ldr	r1, [pc, #560]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b8a      	ldr	r3, [pc, #552]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e106      	b.n	80024ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d073      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d129      	bne.n	8002344 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0f4      	b.n	80024ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002300:	f000 f966 	bl	80025d0 <RCC_GetSysClockFreqFromPLLSource>
 8002304:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4a7c      	ldr	r2, [pc, #496]	; (80024fc <HAL_RCC_ClockConfig+0x268>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d93f      	bls.n	800238e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800230e:	4b7a      	ldr	r3, [pc, #488]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002322:	2b00      	cmp	r3, #0
 8002324:	d033      	beq.n	800238e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d12f      	bne.n	800238e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002336:	4a70      	ldr	r2, [pc, #448]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e024      	b.n	800238e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d107      	bne.n	800235c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0c6      	b.n	80024ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0be      	b.n	80024ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800236c:	f000 f8ce 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8002370:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4a61      	ldr	r2, [pc, #388]	; (80024fc <HAL_RCC_ClockConfig+0x268>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d909      	bls.n	800238e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800237a:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002382:	4a5d      	ldr	r2, [pc, #372]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002388:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4957      	ldr	r1, [pc, #348]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a0:	f7fe fb40 	bl	8000a24 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7fe fb3c 	bl	8000a24 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e095      	b.n	80024ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d023      	beq.n	8002424 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e8:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a42      	ldr	r2, [pc, #264]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 80023ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002400:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002408:	4a3b      	ldr	r2, [pc, #236]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800240a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4936      	ldr	r1, [pc, #216]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
 8002422:	e008      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b80      	cmp	r3, #128	; 0x80
 8002428:	d105      	bne.n	8002436 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 8002430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002434:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d21d      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 020f 	bic.w	r2, r3, #15
 800244c:	4929      	ldr	r1, [pc, #164]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002454:	f7fe fae6 	bl	8000a24 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe fae2 	bl	8000a24 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e03b      	b.n	80024ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d1ed      	bne.n	800245c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4917      	ldr	r1, [pc, #92]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	490f      	ldr	r1, [pc, #60]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024be:	f000 f825 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	490c      	ldr	r1, [pc, #48]	; (8002500 <HAL_RCC_ClockConfig+0x26c>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x270>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_RCC_ClockConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fa52 	bl	800098c <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	04c4b400 	.word	0x04c4b400
 8002500:	08003ca4 	.word	0x08003ca4
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d102      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e047      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d102      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e03e      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d136      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3301      	adds	r3, #1
 8002558:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d10c      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002560:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256a:	68d2      	ldr	r2, [r2, #12]
 800256c:	0a12      	lsrs	r2, r2, #8
 800256e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
      break;
 8002578:	e00c      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002584:	68d2      	ldr	r2, [r2, #12]
 8002586:	0a12      	lsrs	r2, r2, #8
 8002588:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
      break;
 8002592:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0e5b      	lsrs	r3, r3, #25
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	3301      	adds	r3, #1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e001      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025b4:	693b      	ldr	r3, [r7, #16]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	00f42400 	.word	0x00f42400
 80025cc:	007a1200 	.word	0x007a1200

080025d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3301      	adds	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d10c      	bne.n	800260e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025fe:	68d2      	ldr	r2, [r2, #12]
 8002600:	0a12      	lsrs	r2, r2, #8
 8002602:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	617b      	str	r3, [r7, #20]
    break;
 800260c:	e00c      	b.n	8002628 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	0a12      	lsrs	r2, r2, #8
 800261c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002620:	fb02 f303 	mul.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    break;
 8002626:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0e5b      	lsrs	r3, r3, #25
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002642:	687b      	ldr	r3, [r7, #4]
}
 8002644:	4618      	mov	r0, r3
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000
 8002654:	007a1200 	.word	0x007a1200
 8002658:	00f42400 	.word	0x00f42400

0800265c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002664:	2300      	movs	r3, #0
 8002666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002668:	2300      	movs	r3, #0
 800266a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8098 	beq.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10d      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b40      	ldr	r3, [pc, #256]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a3f      	ldr	r2, [pc, #252]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a6:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a39      	ldr	r2, [pc, #228]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b2:	f7fe f9b7 	bl	8000a24 <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b8:	e009      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7fe f9b3 	bl	8000a24 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d902      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	74fb      	strb	r3, [r7, #19]
        break;
 80026cc:	e005      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ef      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d159      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01e      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d019      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	4a1f      	ldr	r2, [pc, #124]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe f973 	bl	8000a24 <HAL_GetTick>
 800273e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002740:	e00b      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe f96f 	bl	8000a24 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d902      	bls.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	74fb      	strb	r3, [r7, #19]
            break;
 8002758:	e006      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ec      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10b      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002784:	e008      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	74bb      	strb	r3, [r7, #18]
 800278a:	e005      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800278c:	40021000 	.word	0x40021000
 8002790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002798:	7c7b      	ldrb	r3, [r7, #17]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4ba6      	ldr	r3, [pc, #664]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4aa5      	ldr	r2, [pc, #660]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b6:	4ba0      	ldr	r3, [pc, #640]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f023 0203 	bic.w	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	499c      	ldr	r1, [pc, #624]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d8:	4b97      	ldr	r3, [pc, #604]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 020c 	bic.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4994      	ldr	r1, [pc, #592]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027fa:	4b8f      	ldr	r3, [pc, #572]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	498b      	ldr	r1, [pc, #556]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800281c:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	4983      	ldr	r1, [pc, #524]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800283e:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	497a      	ldr	r1, [pc, #488]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002860:	4b75      	ldr	r3, [pc, #468]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	4972      	ldr	r1, [pc, #456]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002882:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4969      	ldr	r1, [pc, #420]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a4:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4961      	ldr	r1, [pc, #388]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	4958      	ldr	r1, [pc, #352]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d015      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	4950      	ldr	r1, [pc, #320]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002906:	d105      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4a4a      	ldr	r2, [pc, #296]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002912:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291c:	2b00      	cmp	r3, #0
 800291e:	d015      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002920:	4b45      	ldr	r3, [pc, #276]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4942      	ldr	r1, [pc, #264]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293e:	d105      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002940:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a3c      	ldr	r2, [pc, #240]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002958:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4934      	ldr	r1, [pc, #208]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002976:	d105      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002978:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a2e      	ldr	r2, [pc, #184]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002982:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002990:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	4926      	ldr	r1, [pc, #152]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ae:	d105      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b0:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	4918      	ldr	r1, [pc, #96]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e6:	d105      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	490a      	ldr	r1, [pc, #40]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e049      	b.n	8002ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd feb4 	bl	80007d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f000 fc10 	bl	80032a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d001      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e04a      	b.n	8002b9a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x6c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2e:	d013      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x6c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_TIM_Base_Start_IT+0xc0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x6c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x6c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x6c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d115      	bne.n	8002b84 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d015      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0xaa>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d011      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b82:	e008      	b.n	8002b96 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	00010007 	.word	0x00010007

08002bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e049      	b.n	8002c66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f841 	bl	8002c6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fb4e 	bl	80032a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_TIM_PWM_Start+0x24>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e03c      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d109      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0x3e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e02f      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d109      	bne.n	8002cdc <HAL_TIM_PWM_Start+0x58>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e022      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d109      	bne.n	8002cf6 <HAL_TIM_PWM_Start+0x72>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e015      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d109      	bne.n	8002d10 <HAL_TIM_PWM_Start+0x8c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e008      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e097      	b.n	8002e5a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start+0xb6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	e023      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xc6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d48:	e01b      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0xd6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d58:	e013      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Start+0xe6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_PWM_Start+0xf6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	e003      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 feaa 	bl	8003ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a33      	ldr	r2, [pc, #204]	; (8002e64 <HAL_TIM_PWM_Start+0x1e0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0x13e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a32      	ldr	r2, [pc, #200]	; (8002e68 <HAL_TIM_PWM_Start+0x1e4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00e      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0x13e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a30      	ldr	r2, [pc, #192]	; (8002e6c <HAL_TIM_PWM_Start+0x1e8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d009      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0x13e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <HAL_TIM_PWM_Start+0x1ec>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0x13e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2d      	ldr	r2, [pc, #180]	; (8002e74 <HAL_TIM_PWM_Start+0x1f0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0x142>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_TIM_PWM_Start+0x144>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_TIM_PWM_Start+0x1e0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_TIM_PWM_Start+0x194>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d013      	beq.n	8002e18 <HAL_TIM_PWM_Start+0x194>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_TIM_PWM_Start+0x1f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_TIM_PWM_Start+0x194>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_TIM_PWM_Start+0x1f8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_TIM_PWM_Start+0x194>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_TIM_PWM_Start+0x1e4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_TIM_PWM_Start+0x194>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_TIM_PWM_Start+0x1e8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d115      	bne.n	8002e44 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_TIM_PWM_Start+0x1fc>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d015      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x1d2>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d011      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e42:	e008      	b.n	8002e56 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e000      	b.n	8002e58 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40013400 	.word	0x40013400
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	00010007 	.word	0x00010007

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0ff      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b14      	cmp	r3, #20
 8002eae:	f200 80f0 	bhi.w	8003092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08003093 	.word	0x08003093
 8002ec0:	08003093 	.word	0x08003093
 8002ec4:	08003093 	.word	0x08003093
 8002ec8:	08002f4d 	.word	0x08002f4d
 8002ecc:	08003093 	.word	0x08003093
 8002ed0:	08003093 	.word	0x08003093
 8002ed4:	08003093 	.word	0x08003093
 8002ed8:	08002f8f 	.word	0x08002f8f
 8002edc:	08003093 	.word	0x08003093
 8002ee0:	08003093 	.word	0x08003093
 8002ee4:	08003093 	.word	0x08003093
 8002ee8:	08002fcf 	.word	0x08002fcf
 8002eec:	08003093 	.word	0x08003093
 8002ef0:	08003093 	.word	0x08003093
 8002ef4:	08003093 	.word	0x08003093
 8002ef8:	08003011 	.word	0x08003011
 8002efc:	08003093 	.word	0x08003093
 8002f00:	08003093 	.word	0x08003093
 8002f04:	08003093 	.word	0x08003093
 8002f08:	08003051 	.word	0x08003051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa54 	bl	80033c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	619a      	str	r2, [r3, #24]
      break;
 8002f4a:	e0a5      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fac4 	bl	80034e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6999      	ldr	r1, [r3, #24]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	619a      	str	r2, [r3, #24]
      break;
 8002f8c:	e084      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fb2d 	bl	80035f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0208 	orr.w	r2, r2, #8
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0204 	bic.w	r2, r2, #4
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	61da      	str	r2, [r3, #28]
      break;
 8002fcc:	e064      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fb95 	bl	8003704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69d9      	ldr	r1, [r3, #28]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	61da      	str	r2, [r3, #28]
      break;
 800300e:	e043      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fbfe 	bl	8003818 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0208 	orr.w	r2, r2, #8
 800302a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800304e:	e023      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fc42 	bl	80038e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003090:	e002      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
      break;
 8003096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop

080030ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x1c>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0de      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x1da>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80030e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a63      	ldr	r2, [pc, #396]	; (8003290 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	f000 80a9 	beq.w	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 8003108:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_TIM_ConfigClockSource+0x1e4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	f200 80ae 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	f000 80a1 	beq.w	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 8003118:	4a5e      	ldr	r2, [pc, #376]	; (8003294 <HAL_TIM_ConfigClockSource+0x1e8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	f200 80a6 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003120:	4a5d      	ldr	r2, [pc, #372]	; (8003298 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	f000 8099 	beq.w	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 8003128:	4a5b      	ldr	r2, [pc, #364]	; (8003298 <HAL_TIM_ConfigClockSource+0x1ec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	f200 809e 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003130:	4a5a      	ldr	r2, [pc, #360]	; (800329c <HAL_TIM_ConfigClockSource+0x1f0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	f000 8091 	beq.w	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_TIM_ConfigClockSource+0x1f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f200 8096 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003140:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003144:	f000 8089 	beq.w	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 8003148:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800314c:	f200 808e 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d03e      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0x128>
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	f200 8087 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	f000 8086 	beq.w	8003272 <HAL_TIM_ConfigClockSource+0x1c6>
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d87f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 800316c:	2b70      	cmp	r3, #112	; 0x70
 800316e:	d01a      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xfa>
 8003170:	2b70      	cmp	r3, #112	; 0x70
 8003172:	d87b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003174:	2b60      	cmp	r3, #96	; 0x60
 8003176:	d050      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x16e>
 8003178:	2b60      	cmp	r3, #96	; 0x60
 800317a:	d877      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 800317c:	2b50      	cmp	r3, #80	; 0x50
 800317e:	d03c      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x14e>
 8003180:	2b50      	cmp	r3, #80	; 0x50
 8003182:	d873      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d058      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x18e>
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d86f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 800318c:	2b30      	cmp	r3, #48	; 0x30
 800318e:	d064      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 8003190:	2b30      	cmp	r3, #48	; 0x30
 8003192:	d86b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 8003194:	2b20      	cmp	r3, #32
 8003196:	d060      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d867      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05c      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d05a      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x1ae>
 80031a4:	e062      	b.n	800326c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f000 fc75 	bl	8003aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
      break;
 80031d2:	e04f      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f000 fc5e 	bl	8003aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f6:	609a      	str	r2, [r3, #8]
      break;
 80031f8:	e03c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fbd0 	bl	80039ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2150      	movs	r1, #80	; 0x50
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fc29 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003218:	e02c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	461a      	mov	r2, r3
 8003228:	f000 fbef 	bl	8003a0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2160      	movs	r1, #96	; 0x60
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fc19 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003238:	e01c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	461a      	mov	r2, r3
 8003248:	f000 fbb0 	bl	80039ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fc09 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003258:	e00c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f000 fc00 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 800326a:	e003      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e000      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	00100070 	.word	0x00100070
 8003294:	00100040 	.word	0x00100040
 8003298:	00100030 	.word	0x00100030
 800329c:	00100020 	.word	0x00100020

080032a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <TIM_Base_SetConfig+0x104>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00f      	beq.n	80032d8 <TIM_Base_SetConfig+0x38>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d00b      	beq.n	80032d8 <TIM_Base_SetConfig+0x38>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <TIM_Base_SetConfig+0x108>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_Base_SetConfig+0x38>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <TIM_Base_SetConfig+0x10c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0x38>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <TIM_Base_SetConfig+0x110>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <TIM_Base_SetConfig+0x104>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01b      	beq.n	800332a <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d017      	beq.n	800332a <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <TIM_Base_SetConfig+0x108>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <TIM_Base_SetConfig+0x10c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00f      	beq.n	800332a <TIM_Base_SetConfig+0x8a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <TIM_Base_SetConfig+0x110>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <TIM_Base_SetConfig+0x8a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_Base_SetConfig+0x8a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0x118>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_Base_SetConfig+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <TIM_Base_SetConfig+0x11c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <TIM_Base_SetConfig+0x104>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00f      	beq.n	8003388 <TIM_Base_SetConfig+0xe8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <TIM_Base_SetConfig+0x110>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0xe8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0xe8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <TIM_Base_SetConfig+0x118>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xe8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <TIM_Base_SetConfig+0x11c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40013400 	.word	0x40013400
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800

080033c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0201 	bic.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 0302 	bic.w	r3, r3, #2
 800340c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <TIM_OC1_SetConfig+0x10c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00f      	beq.n	8003440 <TIM_OC1_SetConfig+0x80>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <TIM_OC1_SetConfig+0x110>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00b      	beq.n	8003440 <TIM_OC1_SetConfig+0x80>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <TIM_OC1_SetConfig+0x114>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d007      	beq.n	8003440 <TIM_OC1_SetConfig+0x80>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <TIM_OC1_SetConfig+0x118>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_OC1_SetConfig+0x80>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a28      	ldr	r2, [pc, #160]	; (80034dc <TIM_OC1_SetConfig+0x11c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10c      	bne.n	800345a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0308 	bic.w	r3, r3, #8
 8003446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <TIM_OC1_SetConfig+0x10c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00f      	beq.n	8003482 <TIM_OC1_SetConfig+0xc2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <TIM_OC1_SetConfig+0x110>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_OC1_SetConfig+0xc2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <TIM_OC1_SetConfig+0x114>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_OC1_SetConfig+0xc2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <TIM_OC1_SetConfig+0x118>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_OC1_SetConfig+0xc2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a17      	ldr	r2, [pc, #92]	; (80034dc <TIM_OC1_SetConfig+0x11c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d111      	bne.n	80034a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	621a      	str	r2, [r3, #32]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40013400 	.word	0x40013400
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40014400 	.word	0x40014400
 80034dc:	40014800 	.word	0x40014800

080034e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0210 	bic.w	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0320 	bic.w	r3, r3, #32
 800352e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <TIM_OC2_SetConfig+0x100>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_OC2_SetConfig+0x6c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <TIM_OC2_SetConfig+0x104>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d10d      	bne.n	8003568 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <TIM_OC2_SetConfig+0x100>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00f      	beq.n	8003590 <TIM_OC2_SetConfig+0xb0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <TIM_OC2_SetConfig+0x104>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_OC2_SetConfig+0xb0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1b      	ldr	r2, [pc, #108]	; (80035e8 <TIM_OC2_SetConfig+0x108>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <TIM_OC2_SetConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <TIM_OC2_SetConfig+0x10c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC2_SetConfig+0xb0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <TIM_OC2_SetConfig+0x110>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d113      	bne.n	80035b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800359e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800

080035f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <TIM_OC3_SetConfig+0xfc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d003      	beq.n	800365e <TIM_OC3_SetConfig+0x6a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <TIM_OC3_SetConfig+0x100>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10d      	bne.n	800367a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <TIM_OC3_SetConfig+0xfc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_OC3_SetConfig+0xae>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <TIM_OC3_SetConfig+0x100>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_OC3_SetConfig+0xae>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <TIM_OC3_SetConfig+0x104>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_OC3_SetConfig+0xae>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <TIM_OC3_SetConfig+0x108>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_OC3_SetConfig+0xae>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <TIM_OC3_SetConfig+0x10c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d113      	bne.n	80036ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40013400 	.word	0x40013400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40014400 	.word	0x40014400
 8003700:	40014800 	.word	0x40014800

08003704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a28      	ldr	r2, [pc, #160]	; (8003804 <TIM_OC4_SetConfig+0x100>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_OC4_SetConfig+0x6c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a27      	ldr	r2, [pc, #156]	; (8003808 <TIM_OC4_SetConfig+0x104>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10d      	bne.n	800378c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	031b      	lsls	r3, r3, #12
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800378a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <TIM_OC4_SetConfig+0x100>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00f      	beq.n	80037b4 <TIM_OC4_SetConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <TIM_OC4_SetConfig+0x104>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00b      	beq.n	80037b4 <TIM_OC4_SetConfig+0xb0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a1b      	ldr	r2, [pc, #108]	; (800380c <TIM_OC4_SetConfig+0x108>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_OC4_SetConfig+0xb0>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <TIM_OC4_SetConfig+0x10c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_OC4_SetConfig+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a19      	ldr	r2, [pc, #100]	; (8003814 <TIM_OC4_SetConfig+0x110>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d113      	bne.n	80037dc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	019b      	lsls	r3, r3, #6
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800

08003818 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800385c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <TIM_OC5_SetConfig+0xb4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_OC5_SetConfig+0x7a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <TIM_OC5_SetConfig+0xb8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_OC5_SetConfig+0x7a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <TIM_OC5_SetConfig+0xbc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_OC5_SetConfig+0x7a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <TIM_OC5_SetConfig+0xc0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_OC5_SetConfig+0x7a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a13      	ldr	r2, [pc, #76]	; (80038dc <TIM_OC5_SetConfig+0xc4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d109      	bne.n	80038a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40013400 	.word	0x40013400
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800

080038e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	051b      	lsls	r3, r3, #20
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <TIM_OC6_SetConfig+0xb8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_OC6_SetConfig+0x7c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a17      	ldr	r2, [pc, #92]	; (800399c <TIM_OC6_SetConfig+0xbc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_OC6_SetConfig+0x7c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a16      	ldr	r2, [pc, #88]	; (80039a0 <TIM_OC6_SetConfig+0xc0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_OC6_SetConfig+0x7c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <TIM_OC6_SetConfig+0xc4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_OC6_SetConfig+0x7c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <TIM_OC6_SetConfig+0xc8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d109      	bne.n	8003970 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	029b      	lsls	r3, r3, #10
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40013400 	.word	0x40013400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800

080039ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f023 0201 	bic.w	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f023 030a 	bic.w	r3, r3, #10
 80039e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b087      	sub	sp, #28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0210 	bic.w	r2, r3, #16
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f043 0307 	orr.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2201      	movs	r2, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	401a      	ands	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e065      	b.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d108      	bne.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d013      	beq.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10c      	bne.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40014000 	.word	0x40014000

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4d0d      	ldr	r5, [pc, #52]	; (8003c6c <__libc_init_array+0x38>)
 8003c38:	4c0d      	ldr	r4, [pc, #52]	; (8003c70 <__libc_init_array+0x3c>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	2600      	movs	r6, #0
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	4d0b      	ldr	r5, [pc, #44]	; (8003c74 <__libc_init_array+0x40>)
 8003c46:	4c0c      	ldr	r4, [pc, #48]	; (8003c78 <__libc_init_array+0x44>)
 8003c48:	f000 f820 	bl	8003c8c <_init>
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	2600      	movs	r6, #0
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08003cc4 	.word	0x08003cc4
 8003c70:	08003cc4 	.word	0x08003cc4
 8003c74:	08003cc4 	.word	0x08003cc4
 8003c78:	08003cc8 	.word	0x08003cc8

08003c7c <memset>:
 8003c7c:	4402      	add	r2, r0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
