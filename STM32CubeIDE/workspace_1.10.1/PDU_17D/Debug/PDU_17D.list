
PDU_17D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf8  08003cf8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf8  08003cf8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf8  08003cf8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  08003d10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003d10  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e424  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdf  00000000  00000000  0002e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00030148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d33d  00000000  00000000  00031dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e364  00000000  00000000  0004f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1174  00000000  00000000  0005d461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e5d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  0011e628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003cc0 	.word	0x08003cc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003cc0 	.word	0x08003cc0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fbb6 	bl	800098e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8a5 	bl	8000370 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9ad 	bl	8000584 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f8ed 	bl	8000408 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 800022e:	f000 f931 	bl	8000494 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 8000232:	f000 f9fd 	bl	8000630 <FDCAN_Config>

  //Starting timers
  HAL_TIM_Base_Start_IT(&htim3);
 8000236:	4849      	ldr	r0, [pc, #292]	; (800035c <main+0x144>)
 8000238:	f002 fc72 	bl	8002b20 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800023c:	2104      	movs	r1, #4
 800023e:	4847      	ldr	r0, [pc, #284]	; (800035c <main+0x144>)
 8000240:	f002 fd3a 	bl	8002cb8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (pineapple)
 8000244:	e07f      	b.n	8000346 <main+0x12e>
  {
	  //PWM code starts
	  	  uint16_t CAN_fan_dutycycle = (RxData[2]);
 8000246:	4b46      	ldr	r3, [pc, #280]	; (8000360 <main+0x148>)
 8000248:	789b      	ldrb	r3, [r3, #2]
 800024a:	80fb      	strh	r3, [r7, #6]
	  	  CAN_fan_dutycycle = ((CAN_fan_dutycycle)*256*16)+255;
 800024c:	88fb      	ldrh	r3, [r7, #6]
 800024e:	031b      	lsls	r3, r3, #12
 8000250:	b29b      	uxth	r3, r3
 8000252:	33ff      	adds	r3, #255	; 0xff
 8000254:	80fb      	strh	r3, [r7, #6]

	  	  if (CAN_fan_dutycycle < 6555){
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	f641 129a 	movw	r2, #6554	; 0x199a
 800025c:	4293      	cmp	r3, r2
 800025e:	d803      	bhi.n	8000268 <main+0x50>
	  		  TIM3->CCR2 = 0;
 8000260:	4b40      	ldr	r3, [pc, #256]	; (8000364 <main+0x14c>)
 8000262:	2200      	movs	r2, #0
 8000264:	639a      	str	r2, [r3, #56]	; 0x38
 8000266:	e002      	b.n	800026e <main+0x56>
	  	  } else {
	  		  TIM3->CCR2 = CAN_fan_dutycycle;
 8000268:	4a3e      	ldr	r2, [pc, #248]	; (8000364 <main+0x14c>)
 800026a:	88fb      	ldrh	r3, [r7, #6]
 800026c:	6393      	str	r3, [r2, #56]	; 0x38
	  	  }
	  	  //PWM code ends

	  	  if (pineapple & RxData[0]){
 800026e:	4b3c      	ldr	r3, [pc, #240]	; (8000360 <main+0x148>)
 8000270:	781a      	ldrb	r2, [r3, #0]
 8000272:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <main+0x150>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	4013      	ands	r3, r2
 8000278:	b2db      	uxtb	r3, r3
 800027a:	2b00      	cmp	r3, #0
 800027c:	d006      	beq.n	800028c <main+0x74>
	  		  HAL_GPIO_WritePin(GPIOA, PUMP_CTRL_Pin , GPIO_PIN_SET); //Pump = PIN_A0
 800027e:	2201      	movs	r2, #1
 8000280:	2101      	movs	r1, #1
 8000282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000286:	f001 fc4b 	bl	8001b20 <HAL_GPIO_WritePin>
 800028a:	e005      	b.n	8000298 <main+0x80>
	  	  } else {
	  		  HAL_GPIO_WritePin(GPIOA, PUMP_CTRL_Pin , GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2101      	movs	r1, #1
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f001 fc44 	bl	8001b20 <HAL_GPIO_WritePin>
	    	  }


	  	  if ((pineapple<<1 & RxData[0])>>1){
 8000298:	4b33      	ldr	r3, [pc, #204]	; (8000368 <main+0x150>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	4a30      	ldr	r2, [pc, #192]	; (8000360 <main+0x148>)
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	4013      	ands	r3, r2
 80002a4:	105b      	asrs	r3, r3, #1
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d006      	beq.n	80002b8 <main+0xa0>
	  		  HAL_GPIO_WritePin(GPIOA, BRKLIGHT_CTRL_Pin , GPIO_PIN_SET); //Brkligh  t = PA1
 80002aa:	2201      	movs	r2, #1
 80002ac:	2102      	movs	r1, #2
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f001 fc35 	bl	8001b20 <HAL_GPIO_WritePin>
 80002b6:	e005      	b.n	80002c4 <main+0xac>
	  	  } else {
	  		  HAL_GPIO_WritePin(GPIOA, BRKLIGHT_CTRL_Pin , GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2102      	movs	r1, #2
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f001 fc2e 	bl	8001b20 <HAL_GPIO_WritePin>
	  	  }


//	  	  if ((pineapple<<2 & RxData[0])>>2){
	  	  if ((RxData[0]!=0)  | (RxData[1]!=0)){
 80002c4:	4b26      	ldr	r3, [pc, #152]	; (8000360 <main+0x148>)
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	4b25      	ldr	r3, [pc, #148]	; (8000360 <main+0x148>)
 80002ca:	785b      	ldrb	r3, [r3, #1]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d006      	beq.n	80002e2 <main+0xca>
	  		  HAL_GPIO_WritePin(GPIOB, LED_Pin , GPIO_PIN_SET); //LED = PB11
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002da:	4824      	ldr	r0, [pc, #144]	; (800036c <main+0x154>)
 80002dc:	f001 fc20 	bl	8001b20 <HAL_GPIO_WritePin>
 80002e0:	e005      	b.n	80002ee <main+0xd6>
	  	  } else {
	  		  HAL_GPIO_WritePin(GPIOB, LED_Pin , GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e8:	4820      	ldr	r0, [pc, #128]	; (800036c <main+0x154>)
 80002ea:	f001 fc19 	bl	8001b20 <HAL_GPIO_WritePin>
	  	  }


	  	  if ((pineapple<<3 & RxData[0])>>3){
 80002ee:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <main+0x150>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <main+0x148>)
 80002f6:	7812      	ldrb	r2, [r2, #0]
 80002f8:	4013      	ands	r3, r2
 80002fa:	10db      	asrs	r3, r3, #3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d006      	beq.n	800030e <main+0xf6>
	  		  HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_L_CTRL_Pin , GPIO_PIN_SET); //Fan bb left = PB14
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000306:	4819      	ldr	r0, [pc, #100]	; (800036c <main+0x154>)
 8000308:	f001 fc0a 	bl	8001b20 <HAL_GPIO_WritePin>
 800030c:	e005      	b.n	800031a <main+0x102>
	  	  } else {
	  		  HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_L_CTRL_Pin , GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000314:	4815      	ldr	r0, [pc, #84]	; (800036c <main+0x154>)
 8000316:	f001 fc03 	bl	8001b20 <HAL_GPIO_WritePin>
	  	  }


	  	  if ((pineapple<<4 & RxData[0])>>4){
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <main+0x150>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	011b      	lsls	r3, r3, #4
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <main+0x148>)
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	4013      	ands	r3, r2
 8000326:	111b      	asrs	r3, r3, #4
 8000328:	2b00      	cmp	r3, #0
 800032a:	d006      	beq.n	800033a <main+0x122>
	  		  HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_R_CTRL_Pin , GPIO_PIN_SET); //Fan bb right = PB15
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000332:	480e      	ldr	r0, [pc, #56]	; (800036c <main+0x154>)
 8000334:	f001 fbf4 	bl	8001b20 <HAL_GPIO_WritePin>
 8000338:	e005      	b.n	8000346 <main+0x12e>
	  	  } else {
	  		  HAL_GPIO_WritePin(GPIOB, FAN_BATTBOX_L_CTRL_Pin , GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	480a      	ldr	r0, [pc, #40]	; (800036c <main+0x154>)
 8000342:	f001 fbed 	bl	8001b20 <HAL_GPIO_WritePin>
  while (pineapple)
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <main+0x150>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	f47f af7b 	bne.w	8000246 <main+0x2e>
 8000350:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000090 	.word	0x20000090
 8000360:	20000104 	.word	0x20000104
 8000364:	40000400 	.word	0x40000400
 8000368:	20000000 	.word	0x20000000
 800036c:	48000400 	.word	0x48000400

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b094      	sub	sp, #80	; 0x50
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	2238      	movs	r2, #56	; 0x38
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fc96 	bl	8003cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000392:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000396:	f001 fbdb 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039a:	2302      	movs	r3, #2
 800039c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a4:	2340      	movs	r3, #64	; 0x40
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	2302      	movs	r3, #2
 80003aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ac:	2302      	movs	r3, #2
 80003ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003b4:	230a      	movs	r3, #10
 80003b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003b8:	2302      	movs	r3, #2
 80003ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80003bc:	2308      	movs	r3, #8
 80003be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003c0:	2302      	movs	r3, #2
 80003c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	f107 0318 	add.w	r3, r7, #24
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fc65 	bl	8001c98 <HAL_RCC_OscConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80003d4:	f000 f98a 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d8:	230f      	movs	r3, #15
 80003da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003dc:	2303      	movs	r3, #3
 80003de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2102      	movs	r1, #2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 ff69 	bl	80022c8 <HAL_RCC_ClockConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003fc:	f000 f976 	bl	80006ec <Error_Handler>
  }
}
 8000400:	bf00      	nop
 8000402:	3750      	adds	r7, #80	; 0x50
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//https://community.st.com/s/question/0D53W00000YwmXTSAZ/fdcan-callback-function-is-not-called
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <MX_FDCAN1_Init+0x84>)
 800040e:	4a20      	ldr	r2, [pc, #128]	; (8000490 <MX_FDCAN1_Init+0x88>)
 8000410:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <MX_FDCAN1_Init+0x84>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000426:	2200      	movs	r2, #0
 8000428:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_FDCAN1_Init+0x84>)
 800042c:	2200      	movs	r2, #0
 800042e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000432:	2200      	movs	r2, #0
 8000434:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000438:	2201      	movs	r2, #1
 800043a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_FDCAN1_Init+0x84>)
 800043e:	2203      	movs	r2, #3
 8000440:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000444:	2210      	movs	r2, #16
 8000446:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_FDCAN1_Init+0x84>)
 800044a:	2203      	movs	r2, #3
 800044c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000450:	2201      	movs	r2, #1
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000456:	2203      	movs	r2, #3
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_FDCAN1_Init+0x84>)
 800045c:	2210      	movs	r2, #16
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000462:	2203      	movs	r2, #3
 8000464:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000468:	2201      	movs	r2, #1
 800046a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <MX_FDCAN1_Init+0x84>)
 800046e:	2200      	movs	r2, #0
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_FDCAN1_Init+0x84>)
 8000474:	2200      	movs	r2, #0
 8000476:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_FDCAN1_Init+0x84>)
 800047a:	f000 fc09 	bl	8000c90 <HAL_FDCAN_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000484:	f000 f932 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000002c 	.word	0x2000002c
 8000490:	40006400 	.word	0x40006400

08000494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08e      	sub	sp, #56	; 0x38
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	f107 031c 	add.w	r3, r7, #28
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004c6:	4b2d      	ldr	r3, [pc, #180]	; (800057c <MX_TIM3_Init+0xe8>)
 80004c8:	4a2d      	ldr	r2, [pc, #180]	; (8000580 <MX_TIM3_Init+0xec>)
 80004ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004cc:	4b2b      	ldr	r3, [pc, #172]	; (800057c <MX_TIM3_Init+0xe8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b2a      	ldr	r3, [pc, #168]	; (800057c <MX_TIM3_Init+0xe8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <MX_TIM3_Init+0xe8>)
 80004da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e0:	4b26      	ldr	r3, [pc, #152]	; (800057c <MX_TIM3_Init+0xe8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_TIM3_Init+0xe8>)
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004ec:	4823      	ldr	r0, [pc, #140]	; (800057c <MX_TIM3_Init+0xe8>)
 80004ee:	f002 fabf 	bl	8002a70 <HAL_TIM_Base_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004f8:	f000 f8f8 	bl	80006ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000500:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000506:	4619      	mov	r1, r3
 8000508:	481c      	ldr	r0, [pc, #112]	; (800057c <MX_TIM3_Init+0xe8>)
 800050a:	f002 fde9 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000514:	f000 f8ea 	bl	80006ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <MX_TIM3_Init+0xe8>)
 800051a:	f002 fb6b 	bl	8002bf4 <HAL_TIM_PWM_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000524:	f000 f8e2 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000530:	f107 031c 	add.w	r3, r7, #28
 8000534:	4619      	mov	r1, r3
 8000536:	4811      	ldr	r0, [pc, #68]	; (800057c <MX_TIM3_Init+0xe8>)
 8000538:	f003 fb14 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000542:	f000 f8d3 	bl	80006ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000546:	2360      	movs	r3, #96	; 0x60
 8000548:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000556:	463b      	mov	r3, r7
 8000558:	2204      	movs	r2, #4
 800055a:	4619      	mov	r1, r3
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <MX_TIM3_Init+0xe8>)
 800055e:	f002 fcab 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000568:	f000 f8c0 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <MX_TIM3_Init+0xe8>)
 800056e:	f000 f969 	bl	8000844 <HAL_TIM_MspPostInit>

}
 8000572:	bf00      	nop
 8000574:	3738      	adds	r7, #56	; 0x38
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000090 	.word	0x20000090
 8000580:	40000400 	.word	0x40000400

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b23      	ldr	r3, [pc, #140]	; (8000628 <MX_GPIO_Init+0xa4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a22      	ldr	r2, [pc, #136]	; (8000628 <MX_GPIO_Init+0xa4>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_GPIO_Init+0xa4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_GPIO_Init+0xa4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <MX_GPIO_Init+0xa4>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_GPIO_Init+0xa4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PUMP_CTRL_Pin|BRKLIGHT_CTRL_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2103      	movs	r1, #3
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f001 faa5 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|FAN_BATTBOX_L_CTRL_Pin|FAN_BATTBOX_R_CTRL_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 80005dc:	4813      	ldr	r0, [pc, #76]	; (800062c <MX_GPIO_Init+0xa8>)
 80005de:	f001 fa9f 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PUMP_CTRL_Pin BRKLIGHT_CTRL_Pin */
  GPIO_InitStruct.Pin = PUMP_CTRL_Pin|BRKLIGHT_CTRL_Pin;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 f90e 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin FAN_BATTBOX_L_CTRL_Pin FAN_BATTBOX_R_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_Pin|FAN_BATTBOX_L_CTRL_Pin|FAN_BATTBOX_R_CTRL_Pin;
 8000600:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	4619      	mov	r1, r3
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_GPIO_Init+0xa8>)
 800061a:	f001 f8ff 	bl	800181c <HAL_GPIO_Init>

}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <FDCAN_Config>:
  * @brief  Configures the FDCAN.
  * @param  None
  * @retval None
  */
static void FDCAN_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800063e:	2302      	movs	r3, #2
 8000640:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000642:	2301      	movs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x400; //filter: 0b10000000000 standard 11-bit ID
 8000646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF; //0x7FF; //Filter Mask: 0b11111111111 to check all 11 bits of incoming message against filter
 800064c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000650:	617b      	str	r3, [r7, #20]
  //Check this out: https://schulz-m.github.io/2017/03/23/stm32-can-id-filter/
  //Also: https://community.st.com/s/question/0D53W00000YwmXTSAZ/fdcan-callback-function-is-not-called
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <FDCAN_Config+0x7c>)
 8000658:	f000 fc74 	bl	8000f44 <HAL_FDCAN_ConfigFilter>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <FDCAN_Config+0x36>
  {
    Error_Handler();
 8000662:	f000 f843 	bl	80006ec <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000666:	2300      	movs	r3, #0
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2202      	movs	r2, #2
 800066e:	2102      	movs	r1, #2
 8000670:	480e      	ldr	r0, [pc, #56]	; (80006ac <FDCAN_Config+0x7c>)
 8000672:	f000 fcc1 	bl	8000ff8 <HAL_FDCAN_ConfigGlobalFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <FDCAN_Config+0x50>
  {
    Error_Handler();
 800067c:	f000 f836 	bl	80006ec <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <FDCAN_Config+0x7c>)
 8000682:	f000 fcea 	bl	800105a <HAL_FDCAN_Start>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <FDCAN_Config+0x60>
  {
    Error_Handler();
 800068c:	f000 f82e 	bl	80006ec <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <FDCAN_Config+0x7c>)
 8000696:	f000 fde3 	bl	8001260 <HAL_FDCAN_ActivateNotification>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <FDCAN_Config+0x74>
  {
    Error_Handler();
 80006a0:	f000 f824 	bl	80006ec <Error_Handler>
  }


}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000002c 	.word	0x2000002c

080006b0 <HAL_FDCAN_RxFifo0Callback>:
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
//Do we need this at all for this board? I guess we could use this for immediately activating relays & such
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
 //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00a      	beq.n	80006da <HAL_FDCAN_RxFifo0Callback+0x2a>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_FDCAN_RxFifo0Callback+0x34>)
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 fcee 	bl	80010ac <HAL_FDCAN_GetRxMessage>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    Error_Handler();
 80006d6:	f000 f809 	bl	80006ec <Error_Handler>
      LED_Display(RxData[0]);
      ubKeyNumber = RxData[0];
    }
    */
  }
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000104 	.word	0x20000104
 80006e8:	200000dc 	.word	0x200000dc

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6613      	str	r3, [r2, #96]	; 0x60
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_MspInit+0x44>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09a      	sub	sp, #104	; 0x68
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2244      	movs	r2, #68	; 0x44
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f003 faa5 	bl	8003cb0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a24      	ldr	r2, [pc, #144]	; (80007fc <HAL_FDCAN_MspInit+0xbc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d141      	bne.n	80007f4 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f001 ff85 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800078c:	f7ff ffae 	bl	80006ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_FDCAN_MspInit+0xc0>)
 8000792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <HAL_FDCAN_MspInit+0xc0>)
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079a:	6593      	str	r3, [r2, #88]	; 0x58
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_FDCAN_MspInit+0xc0>)
 800079e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_FDCAN_MspInit+0xc0>)
 80007aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_FDCAN_MspInit+0xc0>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_FDCAN_MspInit+0xc0>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007d2:	2309      	movs	r3, #9
 80007d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f001 f81c 	bl	800181c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2015      	movs	r0, #21
 80007ea:	f000 fa1c 	bl	8000c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007ee:	2015      	movs	r0, #21
 80007f0:	f000 fa33 	bl	8000c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3768      	adds	r7, #104	; 0x68
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40006400 	.word	0x40006400
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_TIM_Base_MspInit+0x38>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d10b      	bne.n	800082e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_TIM_Base_MspInit+0x3c>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <HAL_TIM_Base_MspInit+0x3c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <HAL_TIM_Base_MspInit+0x3c>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40000400 	.word	0x40000400
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <HAL_TIM_MspPostInit+0x64>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d11c      	bne.n	80008a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_TIM_MspPostInit+0x68>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <HAL_TIM_MspPostInit+0x68>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_TIM_MspPostInit+0x68>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RAD_FAN_CTRL_Pin;
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RAD_FAN_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f000 ffbe 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40000400 	.word	0x40000400
 80008ac:	40021000 	.word	0x40021000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f89a 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <FDCAN1_IT0_IRQHandler+0x10>)
 800090a:	f000 fd8f 	bl	800142c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000002c 	.word	0x2000002c

08000918 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490e      	ldr	r1, [pc, #56]	; (800097c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0b      	ldr	r4, [pc, #44]	; (8000988 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000966:	f7ff ffd7 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096a:	f003 f97d 	bl	8003c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096e:	f7ff fc53 	bl	8000218 <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   r0, =_estack
 8000974:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000980:	08003d00 	.word	0x08003d00
  ldr r2, =_sbss
 8000984:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000988:	20000110 	.word	0x20000110

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>

0800098e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f939 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f80e 	bl	80009c0 <HAL_InitTick>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	e001      	b.n	80009b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b0:	f7ff fea2 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b4:	79fb      	ldrb	r3, [r7, #7]

}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_InitTick+0x68>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d022      	beq.n	8000a1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_InitTick+0x6c>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_InitTick+0x68>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f944 	bl	8000c76 <HAL_SYSTICK_Config>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10f      	bne.n	8000a14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d809      	bhi.n	8000a0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fa:	2200      	movs	r2, #0
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000a02:	f000 f910 	bl	8000c26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_InitTick+0x70>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e007      	b.n	8000a1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e004      	b.n	8000a1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e001      	b.n	8000a1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	20000004 	.word	0x20000004
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	2000010c 	.word	0x2000010c
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	2000010c 	.word	0x2000010c

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff29 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c34:	f7ff ff40 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff90 	bl	8000b64 <NVIC_EncodePriority>
 8000c44:	4602      	mov	r2, r0
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff5f 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff33 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffa4 	bl	8000bcc <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e147      	b.n	8000f32 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d106      	bne.n	8000cbc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fd42 	bl	8000740 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	699a      	ldr	r2, [r3, #24]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0210 	bic.w	r2, r2, #16
 8000cca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ccc:	f7ff fec4 	bl	8000a58 <HAL_GetTick>
 8000cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cd2:	e012      	b.n	8000cfa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000cd4:	f7ff fec0 	bl	8000a58 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d90b      	bls.n	8000cfa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	f043 0201 	orr.w	r2, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e11b      	b.n	8000f32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d0e5      	beq.n	8000cd4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	699a      	ldr	r2, [r3, #24]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d18:	f7ff fe9e 	bl	8000a58 <HAL_GetTick>
 8000d1c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d1e:	e012      	b.n	8000d46 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d20:	f7ff fe9a 	bl	8000a58 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	d90b      	bls.n	8000d46 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f043 0201 	orr.w	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0f5      	b.n	8000f32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0e5      	beq.n	8000d20 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	699a      	ldr	r2, [r3, #24]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0202 	orr.w	r2, r2, #2
 8000d62:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a74      	ldr	r2, [pc, #464]	; (8000f3c <HAL_FDCAN_Init+0x2ac>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d103      	bne.n	8000d76 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000d6e:	4a74      	ldr	r2, [pc, #464]	; (8000f40 <HAL_FDCAN_Init+0x2b0>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7c1b      	ldrb	r3, [r3, #16]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d108      	bne.n	8000d90 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	699a      	ldr	r2, [r3, #24]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d8c:	619a      	str	r2, [r3, #24]
 8000d8e:	e007      	b.n	8000da0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d9e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7c5b      	ldrb	r3, [r3, #17]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d108      	bne.n	8000dba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	699a      	ldr	r2, [r3, #24]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000db6:	619a      	str	r2, [r3, #24]
 8000db8:	e007      	b.n	8000dca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	699a      	ldr	r2, [r3, #24]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dc8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7c9b      	ldrb	r3, [r3, #18]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d108      	bne.n	8000de4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000de0:	619a      	str	r2, [r3, #24]
 8000de2:	e007      	b.n	8000df4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	699a      	ldr	r2, [r3, #24]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000df2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000e18:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0210 	bic.w	r2, r2, #16
 8000e28:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d108      	bne.n	8000e44 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	699a      	ldr	r2, [r3, #24]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0204 	orr.w	r2, r2, #4
 8000e40:	619a      	str	r2, [r3, #24]
 8000e42:	e02c      	b.n	8000e9e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d028      	beq.n	8000e9e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d01c      	beq.n	8000e8e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e62:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0210 	orr.w	r2, r2, #16
 8000e72:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d110      	bne.n	8000e9e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0220 	orr.w	r2, r2, #32
 8000e8a:	619a      	str	r2, [r3, #24]
 8000e8c:	e007      	b.n	8000e9e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	699a      	ldr	r2, [r3, #24]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000eae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000eb6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ec6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ec8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ed2:	d115      	bne.n	8000f00 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ee2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000eec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000efc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000efe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 fc2a 	bl	8001770 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40006400 	.word	0x40006400
 8000f40:	40006500 	.word	0x40006500

08000f44 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f54:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d002      	beq.n	8000f62 <HAL_FDCAN_ConfigFilter+0x1e>
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d13d      	bne.n	8000fde <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d119      	bne.n	8000f9e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f76:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000f7e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e01d      	b.n	8000fda <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	075a      	lsls	r2, r3, #29
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	079a      	lsls	r2, r3, #30
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e006      	b.n	8000fec <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f043 0202 	orr.w	r2, r3, #2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
  }
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d116      	bne.n	8001040 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	011a      	lsls	r2, r3, #4
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	431a      	orrs	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	431a      	orrs	r2, r3
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	431a      	orrs	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	e006      	b.n	800104e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001044:	f043 0204 	orr.w	r2, r3, #4
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
  }
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d110      	bne.n	8001090 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	699a      	ldr	r2, [r3, #24]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e006      	b.n	800109e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
  }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010c0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80010c2:	7efb      	ldrb	r3, [r7, #27]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	f040 80bc 	bne.w	8001242 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2b40      	cmp	r3, #64	; 0x40
 80010ce:	d121      	bne.n	8001114 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0af      	b.n	8001250 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	e020      	b.n	8001156 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e08d      	b.n	8001250 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	4613      	mov	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0c9b      	lsrs	r3, r3, #18
 8001170:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e005      	b.n	8001186 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	3304      	adds	r3, #4
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0e1b      	lsrs	r3, r3, #24
 80011d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	0fda      	lsrs	r2, r3, #31
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	3304      	adds	r3, #4
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
 80011f8:	e00a      	b.n	8001210 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	441a      	add	r2, r3
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	440b      	add	r3, r1
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	3301      	adds	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	461a      	mov	r2, r3
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	4293      	cmp	r3, r2
 8001220:	d3eb      	bcc.n	80011fa <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b40      	cmp	r3, #64	; 0x40
 8001226:	d105      	bne.n	8001234 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001232:	e004      	b.n	800123e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e006      	b.n	8001250 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f043 0208 	orr.w	r2, r3, #8
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
  }
}
 8001250:	4618      	mov	r0, r3
 8001252:	372c      	adds	r7, #44	; 0x2c
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	08003ce8 	.word	0x08003ce8

08001260 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001272:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d003      	beq.n	8001282 <HAL_FDCAN_ActivateNotification+0x22>
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	2b02      	cmp	r3, #2
 800127e:	f040 80c8 	bne.w	8001412 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d03b      	beq.n	8001316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d031      	beq.n	8001316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d027      	beq.n	8001316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d01d      	beq.n	8001316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d013      	beq.n	8001316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00c      	beq.n	8001326 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d107      	bne.n	8001326 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d13b      	bne.n	80013b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d131      	bne.n	80013b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	d127      	bne.n	80013b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d11d      	bne.n	80013b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	d113      	bne.n	80013b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00c      	beq.n	80013c2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0202 	orr.w	r2, r2, #2
 80013c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d009      	beq.n	80013e0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	430a      	orrs	r2, r1
 80013dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	430a      	orrs	r2, r1
 800140c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	4013      	ands	r3, r2
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145e:	6a3a      	ldr	r2, [r7, #32]
 8001460:	4013      	ands	r3, r2
 8001462:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800146e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001482:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001486:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800149e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00d      	beq.n	80014d6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2240      	movs	r2, #64	; 0x40
 80014ce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f92e 	bl	8001732 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d014      	beq.n	800151c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014fa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001514:	6939      	ldr	r1, [r7, #16]
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f8ec 	bl	80016f4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800152a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f8b6 	bl	800169e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a3a      	ldr	r2, [r7, #32]
 800153e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff f8b4 	bl	80006b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001556:	69f9      	ldr	r1, [r7, #28]
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f8ab 	bl	80016b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00e      	beq.n	800158a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f8a0 	bl	80016ca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01a      	beq.n	80015ce <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d013      	beq.n	80015ce <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015ae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f888 	bl	80016de <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00e      	beq.n	80015fa <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f888 	bl	800170a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800161e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f87c 	bl	800171e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d011      	beq.n	8001658 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001666:	6979      	ldr	r1, [r7, #20]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f876 	bl	800175a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f858 	bl	8001746 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800177a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800178a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b8:	061a      	lsls	r2, r3, #24
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e005      	b.n	80017fe <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3304      	adds	r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3f3      	bcc.n	80017f2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	4000a400 	.word	0x4000a400

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182a:	e15a      	b.n	8001ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 814c 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80a6 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001994:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6613      	str	r3, [r2, #96]	; 0x60
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a8:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d2:	d01f      	beq.n	8001a14 <HAL_GPIO_Init+0x1f8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d019      	beq.n	8001a10 <HAL_GPIO_Init+0x1f4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x1f0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	; (8001b10 <HAL_GPIO_Init+0x2f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_GPIO_Init+0x2fc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019fc:	2305      	movs	r3, #5
 80019fe:	e00a      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a00:	2306      	movs	r3, #6
 8001a02:	e008      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a14:	2300      	movs	r3, #0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a26:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a34:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a58:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a82:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad6:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae9d 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	48001000 	.word	0x48001000
 8001b18:	48001400 	.word	0x48001400
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e306      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d075      	beq.n	8001da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc0:	4b94      	ldr	r3, [pc, #592]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3e>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_OscConfig+0x44>
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d10b      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4b8d      	ldr	r3, [pc, #564]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d05b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d157      	bne.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e2e1      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x74>
 8001cfe:	4b85      	ldr	r3, [pc, #532]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a84      	ldr	r2, [pc, #528]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b7c      	ldr	r3, [pc, #496]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7b      	ldr	r2, [pc, #492]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d30:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a77      	ldr	r2, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a74      	ldr	r2, [pc, #464]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe fe82 	bl	8000a58 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe fe7e 	bl	8000a58 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e2a6      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6a:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xc0>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe6e 	bl	8000a58 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe fe6a 	bl	8000a58 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e292      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d92:	4b60      	ldr	r3, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0xe8>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d075      	beq.n	8001e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dae:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d102      	bne.n	8001dce <HAL_RCC_OscConfig+0x136>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x13c>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d11f      	bne.n	8001e14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x154>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e265      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	4946      	ldr	r1, [pc, #280]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e00:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fddb 	bl	80009c0 <HAL_InitTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d043      	beq.n	8001e98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e251      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d023      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe fe16 	bl	8000a58 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7fe fe12 	bl	8000a58 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e23a      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	492d      	ldr	r1, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e01a      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2a      	ldr	r2, [pc, #168]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe fdf2 	bl	8000a58 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7fe fdee 	bl	8000a58 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e216      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x1e0>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d041      	beq.n	8001f2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7fe fdcb 	bl	8000a58 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec6:	f7fe fdc7 	bl	8000a58 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1ef      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ef      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x22e>
 8001ee6:	e020      	b.n	8001f2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7fe fdae 	bl	8000a58 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001efe:	e00d      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7fe fdaa 	bl	8000a58 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d906      	bls.n	8001f1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1d2      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ea      	bne.n	8001f00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a6 	beq.w	8002084 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f3c:	4b84      	ldr	r3, [pc, #528]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2b4>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x2b6>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	4a7e      	ldr	r2, [pc, #504]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5e:	4b7c      	ldr	r3, [pc, #496]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b79      	ldr	r3, [pc, #484]	; (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe fd67 	bl	8000a58 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe fd63 	bl	8000a58 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e18b      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x32e>
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	4a65      	ldr	r2, [pc, #404]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc4:	e024      	b.n	8002010 <HAL_RCC_OscConfig+0x378>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fce:	4b60      	ldr	r3, [pc, #384]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	4a5e      	ldr	r2, [pc, #376]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fde:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fee:	e00f      	b.n	8002010 <HAL_RCC_OscConfig+0x378>
 8001ff0:	4b57      	ldr	r3, [pc, #348]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	4a56      	ldr	r2, [pc, #344]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d016      	beq.n	8002046 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe fd1e 	bl	8000a58 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe fd1a 	bl	8000a58 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e140      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ed      	beq.n	8002020 <HAL_RCC_OscConfig+0x388>
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7fe fd07 	bl	8000a58 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe fd03 	bl	8000a58 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e129      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ed      	bne.n	800204e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002072:	7ffb      	ldrb	r3, [r7, #31]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a34      	ldr	r2, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d03c      	beq.n	800210a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800209e:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe fcd6 	bl	8000a58 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b0:	f7fe fcd2 	bl	8000a58 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0fa      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ef      	beq.n	80020b0 <HAL_RCC_OscConfig+0x418>
 80020d0:	e01b      	b.n	800210a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7fe fcb9 	bl	8000a58 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ea:	f7fe fcb5 	bl	8000a58 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0dd      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ef      	bne.n	80020ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80d1 	beq.w	80022b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b0c      	cmp	r3, #12
 800211e:	f000 808b 	beq.w	8002238 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d15e      	bne.n	80021e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fc8f 	bl	8000a58 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	e00c      	b.n	8002158 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe fc8b 	bl	8000a58 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d905      	bls.n	8002158 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0b3      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ec      	bne.n	800213e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002164:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4b56      	ldr	r3, [pc, #344]	; (80022c4 <HAL_RCC_OscConfig+0x62c>)
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6a11      	ldr	r1, [r2, #32]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002174:	3a01      	subs	r2, #1
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800217e:	0212      	lsls	r2, r2, #8
 8002180:	4311      	orrs	r1, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002186:	0852      	lsrs	r2, r2, #1
 8002188:	3a01      	subs	r2, #1
 800218a:	0552      	lsls	r2, r2, #21
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002192:	0852      	lsrs	r2, r2, #1
 8002194:	3a01      	subs	r2, #1
 8002196:	0652      	lsls	r2, r2, #25
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800219e:	06d2      	lsls	r2, r2, #27
 80021a0:	430a      	orrs	r2, r1
 80021a2:	4947      	ldr	r1, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a44      	ldr	r2, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b4:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a41      	ldr	r2, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fc4a 	bl	8000a58 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe fc46 	bl	8000a58 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e06e      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x530>
 80021e6:	e066      	b.n	80022b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 8002206:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fc22 	bl	8000a58 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe fc1e 	bl	8000a58 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e046      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x580>
 8002236:	e03e      	b.n	80022b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e039      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_OscConfig+0x628>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	429a      	cmp	r2, r3
 8002256:	d12c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d123      	bne.n	80022b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d11b      	bne.n	80022b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d113      	bne.n	80022b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	3b01      	subs	r3, #1
 8002298:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	085b      	lsrs	r3, r3, #1
 80022aa:	3b01      	subs	r3, #1
 80022ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	019f800c 	.word	0x019f800c

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e11e      	b.n	800251e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b91      	ldr	r3, [pc, #580]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d910      	bls.n	8002310 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 020f 	bic.w	r2, r3, #15
 80022f6:	498c      	ldr	r1, [pc, #560]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e106      	b.n	800251e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d073      	beq.n	8002404 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d129      	bne.n	8002378 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002324:	4b81      	ldr	r3, [pc, #516]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0f4      	b.n	800251e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002334:	f000 f966 	bl	8002604 <RCC_GetSysClockFreqFromPLLSource>
 8002338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4a7c      	ldr	r2, [pc, #496]	; (8002530 <HAL_RCC_ClockConfig+0x268>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d93f      	bls.n	80023c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002342:	4b7a      	ldr	r3, [pc, #488]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002356:	2b00      	cmp	r3, #0
 8002358:	d033      	beq.n	80023c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800235e:	2b00      	cmp	r3, #0
 8002360:	d12f      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800236a:	4a70      	ldr	r2, [pc, #448]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 800236c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002370:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e024      	b.n	80023c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0c6      	b.n	800251e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002390:	4b66      	ldr	r3, [pc, #408]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0be      	b.n	800251e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023a0:	f000 f8ce 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4a61      	ldr	r2, [pc, #388]	; (8002530 <HAL_RCC_ClockConfig+0x268>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d909      	bls.n	80023c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ae:	4b5f      	ldr	r3, [pc, #380]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b6:	4a5d      	ldr	r2, [pc, #372]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023c2:	4b5a      	ldr	r3, [pc, #360]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f023 0203 	bic.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4957      	ldr	r1, [pc, #348]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d4:	f7fe fb40 	bl	8000a58 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f7fe fb3c 	bl	8000a58 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e095      	b.n	800251e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 020c 	and.w	r2, r3, #12
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	429a      	cmp	r2, r3
 8002402:	d1eb      	bne.n	80023dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b43      	ldr	r3, [pc, #268]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a42      	ldr	r2, [pc, #264]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002426:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800243c:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4936      	ldr	r1, [pc, #216]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
 8002456:	e008      	b.n	800246a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d105      	bne.n	800246a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 8002464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002468:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d21d      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002478:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 020f 	bic.w	r2, r3, #15
 8002480:	4929      	ldr	r1, [pc, #164]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002488:	f7fe fae6 	bl	8000a58 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe fae2 	bl	8000a58 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e03b      	b.n	800251e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1ed      	bne.n	8002490 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4917      	ldr	r1, [pc, #92]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	490f      	ldr	r1, [pc, #60]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024f2:	f000 f825 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_RCC_ClockConfig+0x264>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	490c      	ldr	r1, [pc, #48]	; (8002534 <HAL_RCC_ClockConfig+0x26c>)
 8002504:	5ccb      	ldrb	r3, [r1, r3]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x270>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fa52 	bl	80009c0 <HAL_InitTick>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000
 8002530:	04c4b400 	.word	0x04c4b400
 8002534:	08003cd8 	.word	0x08003cd8
 8002538:	20000004 	.word	0x20000004
 800253c:	20000008 	.word	0x20000008

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	d102      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002552:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e047      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d102      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e03e      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d136      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002594:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800259e:	68d2      	ldr	r2, [r2, #12]
 80025a0:	0a12      	lsrs	r2, r2, #8
 80025a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
      break;
 80025ac:	e00c      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b8:	68d2      	ldr	r2, [r2, #12]
 80025ba:	0a12      	lsrs	r2, r2, #8
 80025bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
      break;
 80025c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0e5b      	lsrs	r3, r3, #25
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	3301      	adds	r3, #1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e001      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025e8:	693b      	ldr	r3, [r7, #16]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	007a1200 	.word	0x007a1200

08002604 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d10c      	bne.n	8002642 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002632:	68d2      	ldr	r2, [r2, #12]
 8002634:	0a12      	lsrs	r2, r2, #8
 8002636:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
    break;
 8002640:	e00c      	b.n	800265c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800264c:	68d2      	ldr	r2, [r2, #12]
 800264e:	0a12      	lsrs	r2, r2, #8
 8002650:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002654:	fb02 f303 	mul.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    break;
 800265a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0e5b      	lsrs	r3, r3, #25
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002676:	687b      	ldr	r3, [r7, #4]
}
 8002678:	4618      	mov	r0, r3
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40021000 	.word	0x40021000
 8002688:	007a1200 	.word	0x007a1200
 800268c:	00f42400 	.word	0x00f42400

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002698:	2300      	movs	r3, #0
 800269a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800269c:	2300      	movs	r3, #0
 800269e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8098 	beq.w	80027de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	4a3f      	ldr	r2, [pc, #252]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a39      	ldr	r2, [pc, #228]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026e6:	f7fe f9b7 	bl	8000a58 <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ec:	e009      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe f9b3 	bl	8000a58 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d902      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002700:	e005      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ef      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d159      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01e      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	d019      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe f973 	bl	8000a58 <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002774:	e00b      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe f96f 	bl	8000a58 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d902      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	74fb      	strb	r3, [r7, #19]
            break;
 800278c:	e006      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ec      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10b      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027b8:	e008      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
 80027be:	e005      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027cc:	7c7b      	ldrb	r3, [r7, #17]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4ba6      	ldr	r3, [pc, #664]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4aa5      	ldr	r2, [pc, #660]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ea:	4ba0      	ldr	r3, [pc, #640]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 0203 	bic.w	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	499c      	ldr	r1, [pc, #624]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800280c:	4b97      	ldr	r3, [pc, #604]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 020c 	bic.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4994      	ldr	r1, [pc, #592]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800282e:	4b8f      	ldr	r3, [pc, #572]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	498b      	ldr	r1, [pc, #556]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002850:	4b86      	ldr	r3, [pc, #536]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	4983      	ldr	r1, [pc, #524]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002872:	4b7e      	ldr	r3, [pc, #504]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	497a      	ldr	r1, [pc, #488]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	4972      	ldr	r1, [pc, #456]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b6:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4969      	ldr	r1, [pc, #420]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d8:	4b64      	ldr	r3, [pc, #400]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4961      	ldr	r1, [pc, #388]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028fa:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	4958      	ldr	r1, [pc, #352]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800291c:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	4950      	ldr	r1, [pc, #320]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293a:	d105      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a4a      	ldr	r2, [pc, #296]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002946:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002954:	4b45      	ldr	r3, [pc, #276]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	4942      	ldr	r1, [pc, #264]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002972:	d105      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4934      	ldr	r1, [pc, #208]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c4:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	4926      	ldr	r1, [pc, #152]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	4918      	ldr	r1, [pc, #96]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d015      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	490a      	ldr	r1, [pc, #40]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a52:	d105      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e049      	b.n	8002b16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd feb4 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f000 fc10 	bl	80032d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d001      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e04a      	b.n	8002bce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_TIM_Base_Start_IT+0xbc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d018      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x6c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d013      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x6c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00e      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x6c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x6c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x6c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_TIM_Base_Start_IT+0xcc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d115      	bne.n	8002bb8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d015      	beq.n	8002bca <HAL_TIM_Base_Start_IT+0xaa>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d011      	beq.n	8002bca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	e008      	b.n	8002bca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e000      	b.n	8002bcc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40013400 	.word	0x40013400
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	00010007 	.word	0x00010007

08002bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e049      	b.n	8002c9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f841 	bl	8002ca2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fb4e 	bl	80032d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_TIM_PWM_Start+0x24>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e03c      	b.n	8002d56 <HAL_TIM_PWM_Start+0x9e>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d109      	bne.n	8002cf6 <HAL_TIM_PWM_Start+0x3e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e02f      	b.n	8002d56 <HAL_TIM_PWM_Start+0x9e>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d109      	bne.n	8002d10 <HAL_TIM_PWM_Start+0x58>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e022      	b.n	8002d56 <HAL_TIM_PWM_Start+0x9e>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d109      	bne.n	8002d2a <HAL_TIM_PWM_Start+0x72>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e015      	b.n	8002d56 <HAL_TIM_PWM_Start+0x9e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d109      	bne.n	8002d44 <HAL_TIM_PWM_Start+0x8c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e008      	b.n	8002d56 <HAL_TIM_PWM_Start+0x9e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e097      	b.n	8002e8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_PWM_Start+0xb6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6c:	e023      	b.n	8002db6 <HAL_TIM_PWM_Start+0xfe>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_PWM_Start+0xc6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d7c:	e01b      	b.n	8002db6 <HAL_TIM_PWM_Start+0xfe>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d104      	bne.n	8002d8e <HAL_TIM_PWM_Start+0xd6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d8c:	e013      	b.n	8002db6 <HAL_TIM_PWM_Start+0xfe>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b0c      	cmp	r3, #12
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_PWM_Start+0xe6>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d9c:	e00b      	b.n	8002db6 <HAL_TIM_PWM_Start+0xfe>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_PWM_Start+0xf6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dac:	e003      	b.n	8002db6 <HAL_TIM_PWM_Start+0xfe>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 feaa 	bl	8003b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a33      	ldr	r2, [pc, #204]	; (8002e98 <HAL_TIM_PWM_Start+0x1e0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x13e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <HAL_TIM_PWM_Start+0x1e4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00e      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x13e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <HAL_TIM_PWM_Start+0x1e8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x13e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <HAL_TIM_PWM_Start+0x1ec>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x13e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <HAL_TIM_PWM_Start+0x1f0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_PWM_Start+0x142>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_TIM_PWM_Start+0x144>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_TIM_PWM_Start+0x1e0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_PWM_Start+0x194>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d013      	beq.n	8002e4c <HAL_TIM_PWM_Start+0x194>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a20      	ldr	r2, [pc, #128]	; (8002eac <HAL_TIM_PWM_Start+0x1f4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_PWM_Start+0x194>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_TIM_PWM_Start+0x1f8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_TIM_PWM_Start+0x194>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_TIM_PWM_Start+0x1e4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_TIM_PWM_Start+0x194>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_TIM_PWM_Start+0x1e8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d115      	bne.n	8002e78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_TIM_PWM_Start+0x1fc>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d015      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x1d2>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d011      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e76:	e008      	b.n	8002e8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e000      	b.n	8002e8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40013400 	.word	0x40013400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	00010007 	.word	0x00010007

08002eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0ff      	b.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b14      	cmp	r3, #20
 8002ee2:	f200 80f0 	bhi.w	80030c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	080030c7 	.word	0x080030c7
 8002ef4:	080030c7 	.word	0x080030c7
 8002ef8:	080030c7 	.word	0x080030c7
 8002efc:	08002f81 	.word	0x08002f81
 8002f00:	080030c7 	.word	0x080030c7
 8002f04:	080030c7 	.word	0x080030c7
 8002f08:	080030c7 	.word	0x080030c7
 8002f0c:	08002fc3 	.word	0x08002fc3
 8002f10:	080030c7 	.word	0x080030c7
 8002f14:	080030c7 	.word	0x080030c7
 8002f18:	080030c7 	.word	0x080030c7
 8002f1c:	08003003 	.word	0x08003003
 8002f20:	080030c7 	.word	0x080030c7
 8002f24:	080030c7 	.word	0x080030c7
 8002f28:	080030c7 	.word	0x080030c7
 8002f2c:	08003045 	.word	0x08003045
 8002f30:	080030c7 	.word	0x080030c7
 8002f34:	080030c7 	.word	0x080030c7
 8002f38:	080030c7 	.word	0x080030c7
 8002f3c:	08003085 	.word	0x08003085
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fa54 	bl	80033f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0208 	orr.w	r2, r2, #8
 8002f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6999      	ldr	r1, [r3, #24]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	619a      	str	r2, [r3, #24]
      break;
 8002f7e:	e0a5      	b.n	80030cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fac4 	bl	8003514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6999      	ldr	r1, [r3, #24]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	021a      	lsls	r2, r3, #8
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	619a      	str	r2, [r3, #24]
      break;
 8002fc0:	e084      	b.n	80030cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fb2d 	bl	8003628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0208 	orr.w	r2, r2, #8
 8002fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0204 	bic.w	r2, r2, #4
 8002fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69d9      	ldr	r1, [r3, #28]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	61da      	str	r2, [r3, #28]
      break;
 8003000:	e064      	b.n	80030cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fb95 	bl	8003738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69d9      	ldr	r1, [r3, #28]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	021a      	lsls	r2, r3, #8
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	61da      	str	r2, [r3, #28]
      break;
 8003042:	e043      	b.n	80030cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fbfe 	bl	800384c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0208 	orr.w	r2, r2, #8
 800305e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0204 	bic.w	r2, r2, #4
 800306e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003082:	e023      	b.n	80030cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fc42 	bl	8003914 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	021a      	lsls	r2, r3, #8
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80030c4:	e002      	b.n	80030cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop

080030e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIM_ConfigClockSource+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0de      	b.n	80032ba <HAL_TIM_ConfigClockSource+0x1da>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800311a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800311e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a63      	ldr	r2, [pc, #396]	; (80032c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f000 80a9 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 800313c:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	f200 80ae 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003144:	4a60      	ldr	r2, [pc, #384]	; (80032c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	f000 80a1 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 800314c:	4a5e      	ldr	r2, [pc, #376]	; (80032c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	f200 80a6 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003154:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003156:	4293      	cmp	r3, r2
 8003158:	f000 8099 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 800315c:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f200 809e 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003164:	4a5a      	ldr	r2, [pc, #360]	; (80032d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	f000 8091 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 800316c:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	f200 8096 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003174:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003178:	f000 8089 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 800317c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003180:	f200 808e 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003188:	d03e      	beq.n	8003208 <HAL_TIM_ConfigClockSource+0x128>
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318e:	f200 8087 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	f000 8086 	beq.w	80032a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	d87f      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d01a      	beq.n	80031da <HAL_TIM_ConfigClockSource+0xfa>
 80031a4:	2b70      	cmp	r3, #112	; 0x70
 80031a6:	d87b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80031a8:	2b60      	cmp	r3, #96	; 0x60
 80031aa:	d050      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x16e>
 80031ac:	2b60      	cmp	r3, #96	; 0x60
 80031ae:	d877      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80031b0:	2b50      	cmp	r3, #80	; 0x50
 80031b2:	d03c      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x14e>
 80031b4:	2b50      	cmp	r3, #80	; 0x50
 80031b6:	d873      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d058      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x18e>
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d86f      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80031c0:	2b30      	cmp	r3, #48	; 0x30
 80031c2:	d064      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 80031c4:	2b30      	cmp	r3, #48	; 0x30
 80031c6:	d86b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d060      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d867      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d05c      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d05a      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x1ae>
 80031d8:	e062      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f000 fc75 	bl	8003ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	609a      	str	r2, [r3, #8]
      break;
 8003206:	e04f      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f000 fc5e 	bl	8003ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800322a:	609a      	str	r2, [r3, #8]
      break;
 800322c:	e03c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	461a      	mov	r2, r3
 800323c:	f000 fbd0 	bl	80039e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2150      	movs	r1, #80	; 0x50
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fc29 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 800324c:	e02c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	461a      	mov	r2, r3
 800325c:	f000 fbef 	bl	8003a3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2160      	movs	r1, #96	; 0x60
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fc19 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 800326c:	e01c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f000 fbb0 	bl	80039e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2140      	movs	r1, #64	; 0x40
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fc09 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 800328c:	e00c      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 fc00 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 800329e:	e003      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e000      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80032a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	00100070 	.word	0x00100070
 80032c8:	00100040 	.word	0x00100040
 80032cc:	00100030 	.word	0x00100030
 80032d0:	00100020 	.word	0x00100020

080032d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <TIM_Base_SetConfig+0x104>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00f      	beq.n	800330c <TIM_Base_SetConfig+0x38>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d00b      	beq.n	800330c <TIM_Base_SetConfig+0x38>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a39      	ldr	r2, [pc, #228]	; (80033dc <TIM_Base_SetConfig+0x108>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_Base_SetConfig+0x38>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <TIM_Base_SetConfig+0x10c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_Base_SetConfig+0x38>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <TIM_Base_SetConfig+0x110>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <TIM_Base_SetConfig+0x104>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01b      	beq.n	800335e <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d017      	beq.n	800335e <TIM_Base_SetConfig+0x8a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <TIM_Base_SetConfig+0x108>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <TIM_Base_SetConfig+0x8a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <TIM_Base_SetConfig+0x10c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_Base_SetConfig+0x8a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a28      	ldr	r2, [pc, #160]	; (80033e4 <TIM_Base_SetConfig+0x110>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0x8a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <TIM_Base_SetConfig+0x114>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0x8a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a26      	ldr	r2, [pc, #152]	; (80033ec <TIM_Base_SetConfig+0x118>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0x8a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <TIM_Base_SetConfig+0x11c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <TIM_Base_SetConfig+0x104>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00f      	beq.n	80033bc <TIM_Base_SetConfig+0xe8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a11      	ldr	r2, [pc, #68]	; (80033e4 <TIM_Base_SetConfig+0x110>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <TIM_Base_SetConfig+0xe8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <TIM_Base_SetConfig+0x114>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_Base_SetConfig+0xe8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <TIM_Base_SetConfig+0x118>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_Base_SetConfig+0xe8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <TIM_Base_SetConfig+0x11c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d103      	bne.n	80033c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	615a      	str	r2, [r3, #20]
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40013400 	.word	0x40013400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800

080033f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f023 0201 	bic.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 0302 	bic.w	r3, r3, #2
 8003440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <TIM_OC1_SetConfig+0x10c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00f      	beq.n	8003474 <TIM_OC1_SetConfig+0x80>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <TIM_OC1_SetConfig+0x110>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00b      	beq.n	8003474 <TIM_OC1_SetConfig+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <TIM_OC1_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <TIM_OC1_SetConfig+0x80>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a29      	ldr	r2, [pc, #164]	; (800350c <TIM_OC1_SetConfig+0x118>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_OC1_SetConfig+0x80>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a28      	ldr	r2, [pc, #160]	; (8003510 <TIM_OC1_SetConfig+0x11c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0308 	bic.w	r3, r3, #8
 800347a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <TIM_OC1_SetConfig+0x10c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00f      	beq.n	80034b6 <TIM_OC1_SetConfig+0xc2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <TIM_OC1_SetConfig+0x110>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <TIM_OC1_SetConfig+0xc2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a19      	ldr	r2, [pc, #100]	; (8003508 <TIM_OC1_SetConfig+0x114>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <TIM_OC1_SetConfig+0xc2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <TIM_OC1_SetConfig+0x118>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_OC1_SetConfig+0xc2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <TIM_OC1_SetConfig+0x11c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d111      	bne.n	80034da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40013400 	.word	0x40013400
 8003508:	40014000 	.word	0x40014000
 800350c:	40014400 	.word	0x40014400
 8003510:	40014800 	.word	0x40014800

08003514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0210 	bic.w	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0320 	bic.w	r3, r3, #32
 8003562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <TIM_OC2_SetConfig+0x100>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC2_SetConfig+0x6c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a27      	ldr	r2, [pc, #156]	; (8003618 <TIM_OC2_SetConfig+0x104>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10d      	bne.n	800359c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <TIM_OC2_SetConfig+0x100>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00f      	beq.n	80035c4 <TIM_OC2_SetConfig+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <TIM_OC2_SetConfig+0x104>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <TIM_OC2_SetConfig+0xb0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <TIM_OC2_SetConfig+0x108>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_OC2_SetConfig+0xb0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <TIM_OC2_SetConfig+0x10c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_OC2_SetConfig+0xb0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a19      	ldr	r2, [pc, #100]	; (8003624 <TIM_OC2_SetConfig+0x110>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d113      	bne.n	80035ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40013400 	.word	0x40013400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <TIM_OC3_SetConfig+0xfc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_OC3_SetConfig+0x6a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <TIM_OC3_SetConfig+0x100>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10d      	bne.n	80036ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <TIM_OC3_SetConfig+0xfc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00f      	beq.n	80036d6 <TIM_OC3_SetConfig+0xae>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <TIM_OC3_SetConfig+0x100>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_OC3_SetConfig+0xae>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <TIM_OC3_SetConfig+0x104>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <TIM_OC3_SetConfig+0xae>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <TIM_OC3_SetConfig+0x108>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_OC3_SetConfig+0xae>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <TIM_OC3_SetConfig+0x10c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d113      	bne.n	80036fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	621a      	str	r2, [r3, #32]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40013400 	.word	0x40013400
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800

08003738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a28      	ldr	r2, [pc, #160]	; (8003838 <TIM_OC4_SetConfig+0x100>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_OC4_SetConfig+0x6c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a27      	ldr	r2, [pc, #156]	; (800383c <TIM_OC4_SetConfig+0x104>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d10d      	bne.n	80037c0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	031b      	lsls	r3, r3, #12
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <TIM_OC4_SetConfig+0x100>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00f      	beq.n	80037e8 <TIM_OC4_SetConfig+0xb0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <TIM_OC4_SetConfig+0x104>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_OC4_SetConfig+0xb0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <TIM_OC4_SetConfig+0x108>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_OC4_SetConfig+0xb0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <TIM_OC4_SetConfig+0x10c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_OC4_SetConfig+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a19      	ldr	r2, [pc, #100]	; (8003848 <TIM_OC4_SetConfig+0x110>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d113      	bne.n	8003810 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	019b      	lsls	r3, r3, #6
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40013400 	.word	0x40013400
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800

0800384c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <TIM_OC5_SetConfig+0xb4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_OC5_SetConfig+0x7a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a16      	ldr	r2, [pc, #88]	; (8003904 <TIM_OC5_SetConfig+0xb8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_OC5_SetConfig+0x7a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a15      	ldr	r2, [pc, #84]	; (8003908 <TIM_OC5_SetConfig+0xbc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_OC5_SetConfig+0x7a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <TIM_OC5_SetConfig+0xc0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC5_SetConfig+0x7a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a13      	ldr	r2, [pc, #76]	; (8003910 <TIM_OC5_SetConfig+0xc4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d109      	bne.n	80038da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	621a      	str	r2, [r3, #32]
}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40013400 	.word	0x40013400
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800

08003914 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800395a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	051b      	lsls	r3, r3, #20
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <TIM_OC6_SetConfig+0xb8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00f      	beq.n	8003990 <TIM_OC6_SetConfig+0x7c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <TIM_OC6_SetConfig+0xbc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_OC6_SetConfig+0x7c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <TIM_OC6_SetConfig+0xc0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_OC6_SetConfig+0x7c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <TIM_OC6_SetConfig+0xc4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC6_SetConfig+0x7c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a14      	ldr	r2, [pc, #80]	; (80039dc <TIM_OC6_SetConfig+0xc8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d109      	bne.n	80039a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	029b      	lsls	r3, r3, #10
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40013400 	.word	0x40013400
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 030a 	bic.w	r3, r3, #10
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0210 	bic.w	r2, r3, #16
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e065      	b.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2b      	ldr	r2, [pc, #172]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d108      	bne.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d013      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10c      	bne.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40013400 	.word	0x40013400
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40014000 	.word	0x40014000

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ca0 <__libc_init_array+0x38>)
 8003c6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ca4 <__libc_init_array+0x3c>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	2600      	movs	r6, #0
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	4d0b      	ldr	r5, [pc, #44]	; (8003ca8 <__libc_init_array+0x40>)
 8003c7a:	4c0c      	ldr	r4, [pc, #48]	; (8003cac <__libc_init_array+0x44>)
 8003c7c:	f000 f820 	bl	8003cc0 <_init>
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	2600      	movs	r6, #0
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08003cf8 	.word	0x08003cf8
 8003ca4:	08003cf8 	.word	0x08003cf8
 8003ca8:	08003cf8 	.word	0x08003cf8
 8003cac:	08003cfc 	.word	0x08003cfc

08003cb0 <memset>:
 8003cb0:	4402      	add	r2, r0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d100      	bne.n	8003cba <memset+0xa>
 8003cb8:	4770      	bx	lr
 8003cba:	f803 1b01 	strb.w	r1, [r3], #1
 8003cbe:	e7f9      	b.n	8003cb4 <memset+0x4>

08003cc0 <_init>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr

08003ccc <_fini>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr
